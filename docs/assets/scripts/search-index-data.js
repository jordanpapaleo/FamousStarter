var __searchIndexData = {"index":{"searchIndex":["align","tostring","clean","camera","eventemitter","tostring","emit","eventhandler","tostring","on","on","trigger","gesturehandler","tostring","triggergestures","trigger","_processpointerstart","_processpointermove","_processpointerend","_processmouseleave","mountpoint","tostring","clean","opacity","tostring","getstate","setstate","clean","set","get","halt","origin","tostring","clean","position","tostring","getstate","setstate","getx","gety","getz","isactive","clean","setx","sety","setz","set","halt","rotation","tostring","clean","scale","tostring","clean","size","tostring","getstate","setstate","clean","setabsolute","get","uieventhandler","tostring","trigger","align","setx","setx","setx","set","update","clock","step","update","nolongerupdate","gettime","nextstep","settimeout","cleartimer","setinterval","componentstore","clearcomponents","clearrenderables","clear","clear","cleancomponents","cleanrenderables","clean","requestcomponentid","requestcomponentid","registercomponentat","registerrenderableat","makecomponentdirtyat","makerenderabledirtyat","cleancomponentat","cleanrenderableat","getcomponentat","getrenderableat","getcomponents","getrenderable","getrenderablesize","context","addchild","removechild","update","getrenderpath","receive","_receivecontextsize","famous","step","postmessage","handleframe","handlewith","onmessage","getclock","getmessagequeue","getglobaldispatch","globaldispatch","targetedtrigger","targetedon","targetedoff","globalon","globalon","emit","layer","clear","requestid","registerat","dirtyat","cleanat","clean","getat","get","localdispatch","kill","getnode","getcontext","getrenderpath","getrenderproxy","registertargetedevent","registerglobalevent","deregisterglobalevent","emit","cleancompoents","cleanrendercontext","cleanrenderables","addcomponent","dirtycomponent","addrenderable","dirtyrenderable","messagequeue","enqueue","getall","clear","mountpoint","node","addchild","removechild","removechildatindex","removeallchildren","kill","getdispatch","getchildren","update","opacity","set","setdirty","clean","origin","set","proxy","rendercontext","ontransformchange","offtransformchange","onsizechange","offsizechange","ontransformchange","offtransformchange","setopacity","setposition","setabsolute","getsize","setproportions","setdifferntial","setrotation","setscale","setalign","setorigin","setmountpoint","update","renderproxy","getrenderpath","receive","size","get","setproportions","setdifferential","_setabsolute","setabsolute","gettopdownsize","_update","toidentity","transform","getglobalmatrix","getlocalvectors","_invalidatefromparent","_update","translate","rotate","scale","settranslation","gettranslation","setrotate","getrotation","setscale","getscale","htmlelement","property","truesize","attribute","addclass","removeclass","id","content","get","eventlistener","isrenderable","clear","elementallocator","allocate","deallocate","getnodecount","stringifymatrix","start","stop","isrunning","step","loop","update","nolongerupdate","mat33","get","set","copy","vectormultiply","multiply","transpose","getdeterminant","inverse","clone","inverse","transpose","add","subtract","multiply","quaternion","add","subtract","scalarmultiply","multiply","leftmultiply","rotatevector","invert","conjugate","length","normalize","makefromangleandaxis","set","copy","clear","dot","tomatrix","slerp","clamp","toeulerxyz","fromeulerxyz","multiply","conjugate","normalize","clone","add","subtract","scale","dotproduct","vec2","set","add","subtract","scale","rotate","dot","cross","invert","map","length","copy","clear","iszero","toarray","normalize","clone","add","subtract","scale","dot","cross","vec3","set","add","subtract","rotatex","rotatey","rotatez","dot","cross","scale","invert","map","length","length","copy","clear","iszero","toarray","normalize","applyrotation","applymatrix","normalize","applyrotation","clone","add","subtract","scale","dotproduct","crossproduct","project","tripleproduct","_hullsupport","reset","reset","addvertex","removevertex","addfeature","removefeature","getlastvertex","getfeatureclosesttoorigin","_validateedge","reshape","simplexcontainsorigin","_computeconvexhull","_subexpressions","_computepolyhedralproperties","physicsengine","setorigin","setorientation","_addelement","_removeelement","add","remove","addbody","addforce","addconstraint","removebody","removeforce","removeconstraint","update","gettransform","_integratevelocity","_integratepose","box","convexbodyfactory","setsize","updatelocalinertia","support","updateshape","_computeinertiaproperties","particle","getrestrictions","setrestrictions","getmass","setmass","getinversemass","updatelocalinertia","updateinertia","getposition","setposition","getvelocity","setvelocity","getmomentum","setmomentum","getorientation","setorientation","getangularvelocity","setangularvelocity","getangularmomentum","setangularmomentum","getforce","setforce","gettorque","settorque","applyforce","applytorque","applyimpulse","applyangularimpulse","support","updateshape","sphere","getradius","setradius","updateinertia","support","down","wall","angle","init","update","resolve","clamp","reset","collision","init","update","resolve","addtarget","addtarget","applynarrowphase","sphereintersectsphere","boxintersectsphere","convexintersectconvex","convexintersectwall","constraint","setoptions","init","update","resolve","curve","init","update","resolve","direction","init","update","resolve","distance","init","update","resolve","hinge","init","update","resolve","point2point","init","update","resolve","aabb","update","checkoverlap","add","update","bruteforce","add","update","clamp","addmanifold","removemanifold","update","prepcontacts","resolvemanifolds","registercontact","reset","addcontact","removecontact","contains","update","resolvecontacts","reset","init","update","resolve","reset","freegjk_epadynamicgeometry","minkowskisupport","gjk\nparam {body} body1\nparam {body} body2","epa","sweepandprune","add","add","update","update","drag","quadratic","linear","init","update","force","setoptions","addtarget","addtarget","init","update","gravity1d","down","init","update","gravity3d","init","update","rotationaldrag","quadratic","linear","init","update","rotationalspring","init","update","spring","fene","hooke","init","update","compositor","commandstooutput","sendevent","handlewith","getorsetcontext","givesizefor","sendresize","drawcommands","receivecommands","clearcommands","threadmanager","update","history","hashbangurls","onstatechange","offstatechange","pushstate","replacestate","getstate","router","start","navigate","addroute","invoke","linear","easein","easeout","easeinout","easeoutbounce","spring","inquad","outquad","inoutquad","incubic","outcubic","inoutcubic","inquart","outquart","inoutquart","inquint","outquint","inoutquint","insine","outsine","inoutsine","inexpo","outexpo","inoutexpo","incirc","outcirc","inoutcirc","inelastic","outelastic","inoutelastic","inback","outback","inoutback","inbounce","outbounce","inoutbounce","registercurve","unregistercurve","getcurve","getcurves","multipletransition","get","set","pause","resume","ispaused","reset","transitionable","set","reset","delay","get","isactive","halt","pause","ispaused","resume","tweentransition","setoptions","set","reset","getvelocity","get","update","isactive","halt","pause","ispaused","resume","after","callbackstore","on","off","trigger","color","tostring","set","isactive","changeto","copy","clone","setcolor","getcolor","determinetype","setr","setg","setb","setrgb","getr","getg","getb","getrgb","getnormalizedrgb","getrgbstring","addrgb","addscalar","multiplyrgb","multiplyscalar","equals","copygammatolinear","convertgammatolinear","addcolors","tohex","gethex","sethex","huetorgb","sethsl","gethsl","gethue","sethue","getsaturation","setsaturation","getbrightness","getlightness","setlightness","sethsv","gethsv","flattenarguments","argstoarray","isstring","isint","isfloat","allfloats","allints","allstrings","ispercentage","getrandomrgb","getrandomcolor","ishex","istype","clamp","iscolorinstance","keycodes","objectmanager","register","disposeof","clone","flatclone","loadurl","strip","dynamicgeometry","getvertexbuffer","setvertexbuffer","fromgeometry","setvertexpositions","setnormals","settexturecoords","settexturecoords","setdrawtype","getvertexpositions","getnormals","gettexturecoords","geometry","geometryhelper","generateparametric","computenormals","subdivide","getuniquefaces","subdivide","getspheroidnormals","getspheroiduv","normalizeall","normalizevertices","gettranslationfactor","getscalefactor","getazimuth","getaltitude","trianglestolines","circle","getbuffers","cylinder","generator","geodesicsphere","icosahedron","parametriccone","generator","plane","generator","tetrahedron","torus","generator","triangle","material","traverse","_compile","mesh","tostring","_receivetransformchange","_receivesizechange","_receiveopacitychange","getsize","setgeometry","getgeometry","clean","setbasecolor","getbasecolor","setflatshading","getflatshading","normal","getnormals","setglossiness","getglossiness","metallic","getmetallness","setpositionoffset","getpositionoffset","setoptions","ambientlight","tostring","constructor","light","tostring","setcolor","getcolor","clean","pointlight","tostring","constructor","_receivetransformchange","buffer","subdata","bufferregistry","allocate","program","registermaterial","resetprogram","uniformiscached","setuniforms","compileshader","texture","bind","unbind","setimage","setarray","readback","webglrenderer","numlights","getwebglcontext","createlight","createmesh","receive","draw","drawbuffers","renderoffscreen","checkframebufferstatus","updatesize","handleoptions","resetoptions","loadimage","handletexture"],"longSearchIndex":["align","align.tostring","align.clean","camera","eventemitter","eventemitter.prototype.tostring","eventemitter.prototype.emit","eventhandler","eventhandler.prototype.tostring","eventhandler.prototype.on","eventhandler.prototype.on","eventhandler.prototype.trigger","gesturehandler","gesturehandler.prototype.tostring","gesturehandler.prototype.triggergestures","gesturehandler.prototype.trigger","gesturehandler.prototype._processpointerstart","gesturehandler.prototype._processpointermove","gesturehandler.prototype._processpointerend","gesturehandler.prototype._processmouseleave","mountpoint","mountpoint.tostring","mountpoint.clean","opacity","opacity.tostring","opacity.getstate","opacity.setstate","opacity.clean","opacity.set","opacity.get","opacity.halt","origin","origin.tostring","origin.clean","position","position.tostring","position.getstate","position.setstate","position.getx","position.gety","position.getz","position.isactive","position.clean","position.setx","position.sety","position.setz","position.set","position.halt","rotation","rotation.tostring","rotation.clean","scale","scale.tostring","scale.clean","size","size.tostring","size.getstate","size.setstate","size.clean","size.setabsolute","size.get","uieventhandler","uieventhandler.prototype.tostring","uieventhandler.prototype.trigger","align","align.prototype.setx","align.prototype.setx","align.prototype.setx","align.prototype.set","align.prototype.update","clock","clock.prototype.step","clock.prototype.update","clock.prototype.nolongerupdate","clock.prototype.gettime","clock.prototype.nextstep","clock.prototype.settimeout","clock.prototype.cleartimer","clock.prototype.setinterval","componentstore","componentstore.prototype.clearcomponents","componentstore.prototype.clearrenderables","componentstore.prototype.clear","componentstore.clear","componentstore.prototype.cleancomponents","componentstore.prototype.cleanrenderables","componentstore.prototype.clean","componentstore.prototype.requestcomponentid","componentstore.prototype.requestcomponentid","componentstore.prototype.registercomponentat","componentstore.prototype.registerrenderableat","componentstore.prototype.makecomponentdirtyat","componentstore.prototype.makerenderabledirtyat","componentstore.prototype.cleancomponentat","componentstore.prototype.cleanrenderableat","componentstore.prototype.getcomponentat","componentstore.prototype.getrenderableat","componentstore.prototype.getcomponents","componentstore.prototype.getrenderable","componentstore.prototype.getrenderablesize","context","context.prototype.addchild","context.prototype.removechild","context.prototype.update","context.prototype.getrenderpath","context.prototype.receive","context.prototype._receivecontextsize","famous","famous.prototype.step","famous.prototype.postmessage","famous.prototype.handleframe","famous.prototype.handlewith","famous.prototype.onmessage","famous.prototype.getclock","famous.prototype.getmessagequeue","famous.prototype.getglobaldispatch","globaldispatch","globaldispatch.prototype.targetedtrigger","globaldispatch.prototype.targetedon","globaldispatch.prototype.targetedoff","globaldispatch.prototype.globalon","globaldispatch.prototype.globalon","globaldispatch.prototype.emit","layer","layer.prototype.clear","layer.prototype.requestid","layer.prototype.registerat","layer.prototype.dirtyat","layer.prototype.cleanat","layer.prototype.clean","layer.prototype.getat","layer.prototype.get","localdispatch","localdispatch.prototype.kill","localdispatch.prototype.getnode","localdispatch.prototype.getcontext","localdispatch.prototype.getrenderpath","localdispatch.prototype.getrenderproxy","localdispatch.prototype.registertargetedevent","localdispatch.prototype.registerglobalevent","localdispatch.prototype.deregisterglobalevent","localdispatch.emit","localdispatch.prototype.cleancompoents","localdispatch.prototype.cleanrendercontext","localdispatch.prototype.cleanrenderables","localdispatch.prototype.addcomponent","localdispatch.prototype.dirtycomponent","localdispatch.prototype.addrenderable","localdispatch.prototype.dirtyrenderable","messagequeue","messagequeue.prototype.enqueue","messagequeue.prototype.getall","messagequeue.prototype.clear","mountpoint","node","node.prototype.addchild","node.prototype.removechild","node.prototype.removechildatindex","node.prototype.removeallchildren","node.prototype.kill","node.prototype.getdispatch","node.prototype.getchildren","node.prototype.update","opacity","opacity.prototype.set","opacity.prototype.setdirty","opacity.prototype.clean","origin","origin.prototype.set","proxy","rendercontext","rendercontext.prototype.ontransformchange","rendercontext.prototype.offtransformchange","rendercontext.prototype.onsizechange","rendercontext.prototype.offsizechange","rendercontext.prototype.ontransformchange","rendercontext.prototype.offtransformchange","rendercontext.prototype.setopacity","rendercontext.prototype.setposition","rendercontext.prototype.setabsolute","rendercontext.prototype.getsize","rendercontext.prototype.setproportions","rendercontext.prototype.setdifferntial","rendercontext.prototype.setrotation","rendercontext.prototype.setscale","rendercontext.prototype.setalign","rendercontext.prototype.setorigin","rendercontext.prototype.setmountpoint","rendercontext.prototype.update","renderproxy","renderproxy.prototype.getrenderpath","renderproxy.prototype.receive","size","size.prototype.get","size.prototype.setproportions","size.prototype.setdifferential","size.prototype._setabsolute","size.prototype.setabsolute","size.prototype.gettopdownsize","size.prototype._update","size.prototype.toidentity","transform","transform.prototype.getglobalmatrix","transform.prototype.getlocalvectors","transform.prototype._invalidatefromparent","transform.prototype._update","transform.prototype.translate","transform.prototype.rotate","transform.prototype.scale","transform.prototype.settranslation","transform.prototype.gettranslation","transform.prototype.setrotate","transform.prototype.getrotation","transform.prototype.setscale","transform.prototype.getscale","htmlelement","htmlelement.prototype.property","htmlelement.prototype.truesize","htmlelement.prototype.attribute","htmlelement.prototype.addclass","htmlelement.prototype.removeclass","htmlelement.prototype.id","htmlelement.prototype.content","htmlelement.prototype.get","htmlelement.prototype.eventlistener","htmlelement.prototype.isrenderable","htmlelement.prototype.clear","elementallocator","elementallocator.prototype.allocate","elementallocator.prototype.deallocate","elementallocator.prototype.getnodecount","virtualelement.prototype.stringifymatrix","index.prototype.start","index.prototype.stop","index.prototype.isrunning","index.prototype.step","index.prototype.loop","index.prototype.update","index.prototype.nolongerupdate","mat33","mat33.prototype.get","mat33.prototype.set","mat33.prototype.copy","mat33.prototype.vectormultiply","mat33.prototype.multiply","mat33.prototype.transpose","mat33.prototype.getdeterminant","mat33.prototype.inverse","mat33.prototype.clone","mat33.prototype.inverse","mat33.prototype.transpose","mat33.prototype.add","mat33.prototype.subtract","mat33.prototype.multiply","quaternion","quaternion.prototype.add","quaternion.prototype.subtract","quaternion.prototype.scalarmultiply","quaternion.prototype.multiply","quaternion.prototype.leftmultiply","quaternion.prototype.rotatevector","quaternion.prototype.invert","quaternion.prototype.conjugate","quaternion.prototype.length","quaternion.prototype.normalize","quaternion.prototype.makefromangleandaxis","quaternion.prototype.set","quaternion.prototype.copy","quaternion.prototype.clear","quaternion.prototype.dot","quaternion.prototype.tomatrix","quaternion.prototype.slerp","quaternion.prototype.clamp","quaternion.prototype.toeulerxyz","quaternion.prototype.fromeulerxyz","quaternion.prototype.multiply","quaternion.prototype.conjugate","quaternion.prototype.normalize","quaternion.prototype.clone","quaternion.add","quaternion.subtract","quaternion.scale","quaternion.prototype.dotproduct","vec2","vec2.prototype.set","vec2.prototype.add","vec2.prototype.subtract","vec2.prototype.scale","vec2.prototype.rotate","vec2.prototype.dot","vec2.prototype.cross","vec2.prototype.invert","vec2.prototype.map","vec2.prototype.length","vec2.prototype.copy","vec2.prototype.clear","vec2.prototype.iszero","vec2.prototype.toarray","vec2.prototype.normalize","vec2.prototype.clone","vec2.prototype.add","vec2.prototype.subtract","vec2.prototype.scale","vec2.prototype.dot","vec2.prototype.cross","vec3","vec3.prototype.set","vec3.prototype.add","vec3.prototype.subtract","vec3.prototype.rotatex","vec3.prototype.rotatey","vec3.prototype.rotatez","vec3.prototype.dot","vec3.prototype.cross","vec3.prototype.scale","vec3.prototype.invert","vec3.prototype.map","vec3.prototype.length","vec3.prototype.length","vec3.prototype.copy","vec3.prototype.clear","vec3.prototype.iszero","vec3.prototype.toarray","vec3.prototype.normalize","vec3.prototype.applyrotation","vec3.prototype.applymatrix","vec3.prototype.normalize","vec3.prototype.applyrotation","vec3.prototype.clone","vec3.prototype.add","vec3.prototype.subtract","vec3.prototype.scale","vec3.prototype.dotproduct","vec3.prototype.crossproduct","vec3.prototype.project","geometry.prototype.tripleproduct","geometry.prototype._hullsupport","geometry.prototype.reset","geometry.prototype.reset","geometry.prototype.addvertex","geometry.prototype.removevertex","geometry.prototype.addfeature","geometry.prototype.removefeature","geometry.prototype.getlastvertex","geometry.prototype.getfeatureclosesttoorigin","geometry.prototype._validateedge","geometry.prototype.reshape","geometry.prototype.simplexcontainsorigin","geometry.prototype._computeconvexhull","geometry.prototype._subexpressions","geometry.prototype._computepolyhedralproperties","physicsengine","physicsengine.prototype.setorigin","physicsengine.prototype.setorientation","physicsengine.prototype._addelement","physicsengine.prototype._removeelement","physicsengine.prototype.add","physicsengine.prototype.remove","physicsengine.prototype.addbody","physicsengine.prototype.addforce","physicsengine.prototype.addconstraint","physicsengine.prototype.removebody","physicsengine.prototype.removeforce","physicsengine.prototype.removeconstraint","physicsengine.prototype.update","physicsengine.prototype.gettransform","physicsengine.prototype._integratevelocity","physicsengine.prototype._integratepose","box","convexbodyfactory","convexbodyfactory.prototype.setsize","convexbodyfactory.prototype.updatelocalinertia","convexbodyfactory.prototype.support","convexbodyfactory.prototype.updateshape","convexbodyfactory.prototype._computeinertiaproperties","particle","particle.prototype.getrestrictions","particle.prototype.setrestrictions","particle.prototype.getmass","particle.prototype.setmass","particle.prototype.getinversemass","particle.prototype.updatelocalinertia","particle.prototype.updateinertia","particle.prototype.getposition","particle.prototype.setposition","particle.prototype.getvelocity","particle.prototype.setvelocity","particle.prototype.getmomentum","particle.prototype.setmomentum","particle.prototype.getorientation","particle.prototype.setorientation","particle.prototype.getangularvelocity","particle.prototype.setangularvelocity","particle.prototype.getangularmomentum","particle.prototype.setangularmomentum","particle.prototype.getforce","particle.prototype.setforce","particle.prototype.gettorque","particle.prototype.settorque","particle.prototype.applyforce","particle.prototype.applytorque","particle.prototype.applyimpulse","particle.prototype.applyangularimpulse","particle.prototype.support","particle.prototype.updateshape","sphere","sphere.prototype.getradius","sphere.prototype.setradius","sphere.prototype.updateinertia","sphere.prototype.support","wall.down","wall","angle","angle.prototype.init","angle.prototype.update","angle.prototype.resolve","collision.prototype.clamp","collision.prototype.reset","collision","collision.prototype.init","collision.prototype.update","collision.prototype.resolve","collision.prototype.addtarget","collision.prototype.addtarget","collision.prototype.applynarrowphase","collision.prototype.sphereintersectsphere","collision.prototype.boxintersectsphere","collision.prototype.convexintersectconvex","collision.prototype.convexintersectwall","constraint","constraint.prototype.setoptions","constraint.prototype.init","constraint.prototype.update","constraint.prototype.resolve","curve","curve.prototype.init","curve.prototype.update","curve.prototype.resolve","direction","direction.prototype.init","direction.prototype.update","direction.prototype.resolve","distance","distance.prototype.init","distance.prototype.update","distance.prototype.resolve","hinge","hinge.prototype.init","hinge.prototype.update","hinge.prototype.resolve","point2point","point2point.prototype.init","point2point.prototype.update","point2point.prototype.resolve","aabb","aabb.prototype.update","aabb.prototype.checkoverlap","bruteforce.prototype.add","bruteforce.prototype.update","bruteforce","bruteforce.prototype.add","bruteforce.prototype.update","contactmanifold.prototype.clamp","contactmanifold.prototype.addmanifold","contactmanifold.prototype.removemanifold","contactmanifold.prototype.update","contactmanifold.prototype.prepcontacts","contactmanifold.prototype.resolvemanifolds","contactmanifold.prototype.registercontact","contactmanifold.prototype.reset","contactmanifold.prototype.addcontact","contactmanifold.prototype.removecontact","contactmanifold.prototype.contains","contactmanifold.prototype.update","contactmanifold.prototype.resolvecontacts","contactmanifold.prototype.reset","contactmanifold.prototype.init","contactmanifold.prototype.update","contactmanifold.prototype.resolve","convexcollisiondetection.prototype.reset","convexcollisiondetection.prototype.freegjk_epadynamicgeometry","convexcollisiondetection.prototype.minkowskisupport","convexcollisiondetection.prototype.body2","convexcollisiondetection.prototype.epa","sweepandprune","sweepandprune.prototype.add","sweepandprune.prototype.add","sweepandprune.update","sweepandprune.prototype.update","drag","drag.quadratic","drag.linear","drag.prototype.init","drag.prototype.update","force","force.prototype.setoptions","force.prototype.addtarget","force.prototype.addtarget","force.prototype.init","force.prototype.update","gravity1d","gravity1d.down","gravity1d.prototype.init","gravity1d.prototype.update","gravity3d","gravity3d.prototype.init","gravity3d.prototype.update","rotationaldrag","rotationaldrag.quadratic","rotationaldrag.linear","rotationaldrag.prototype.init","rotationaldrag.prototype.update","rotationalspring","rotationalspring.prototype.init","rotationalspring.prototype.update","spring","spring.fene","spring.hooke","spring.prototype.init","spring.prototype.update","compositor","compositor.commandstooutput","compositor.prototype.sendevent","compositor.prototype.handlewith","compositor.prototype.getorsetcontext","compositor.prototype.givesizefor","compositor.prototype.sendresize","compositor.prototype.drawcommands","compositor.receivecommands","compositor.prototype.clearcommands","threadmanager","threadmanager.prototype.update","history","history.hashbangurls","history.prototype.onstatechange","history.prototype.offstatechange","history.prototype.pushstate","history.prototype.replacestate","history.prototype.getstate","router","router.prototype.start","router.prototype.navigate","router.prototype.addroute","router.prototype.invoke","easing.prototype.linear","easing.prototype.easein","easing.prototype.easeout","easing.prototype.easeinout","easing.prototype.easeoutbounce","easing.prototype.spring","easing.prototype.inquad","easing.prototype.outquad","easing.prototype.inoutquad","easing.prototype.incubic","easing.prototype.outcubic","easing.prototype.inoutcubic","easing.prototype.inquart","easing.prototype.outquart","easing.prototype.inoutquart","easing.prototype.inquint","easing.prototype.outquint","easing.prototype.inoutquint","easing.prototype.insine","easing.prototype.outsine","easing.prototype.inoutsine","easing.prototype.inexpo","easing.prototype.outexpo","easing.prototype.inoutexpo","easing.prototype.incirc","easing.prototype.outcirc","easing.prototype.inoutcirc","easing.prototype.inelastic","easing.prototype.outelastic","easing.prototype.inoutelastic","easing.prototype.inback","easing.prototype.outback","easing.prototype.inoutback","easing.prototype.inbounce","easing.prototype.outbounce","easing.prototype.inoutbounce","easing.prototype.registercurve","easing.prototype.unregistercurve","easing.prototype.getcurve","easing.prototype.getcurves","multipletransition","multipletransition.prototype.get","multipletransition.prototype.set","multipletransition.prototype.pause","multipletransition.prototype.resume","multipletransition.prototype.ispaused","multipletransition.prototype.reset","transitionable","transitionable.prototype.set","transitionable.prototype.reset","transitionable.prototype.delay","transitionable.prototype.get","transitionable.prototype.isactive","transitionable.prototype.halt","transitionable.prototype.pause","transitionable.prototype.ispaused","transitionable.prototype.resume","tweentransition","tweentransition.prototype.setoptions","tweentransition.prototype.set","tweentransition.prototype.reset","tweentransition.prototype.getvelocity","tweentransition.prototype.get","tweentransition.prototype.update","tweentransition.prototype.isactive","tweentransition.prototype.halt","tweentransition.prototype.pause","tweentransition.prototype.ispaused","tweentransition.prototype.resume","after","callbackstore","callbackstore.prototype.on","callbackstore.prototype.off","callbackstore.prototype.trigger","color","color.prototype.tostring","color.prototype.set","color.prototype.isactive","color.prototype.changeto","color.prototype.copy","color.prototype.clone","color.prototype.setcolor","color.prototype.getcolor","color.prototype.determinetype","color.prototype.setr","color.prototype.setg","color.prototype.setb","color.prototype.setrgb","color.prototype.getr","color.prototype.getg","color.prototype.getb","color.prototype.getrgb","color.prototype.getnormalizedrgb","color.prototype.getrgbstring","color.prototype.addrgb","color.prototype.addscalar","color.prototype.multiplyrgb","color.prototype.multiplyscalar","color.prototype.equals","color.prototype.copygammatolinear","color.prototype.convertgammatolinear","color.prototype.addcolors","color.prototype.tohex","color.prototype.gethex","color.prototype.sethex","color.prototype.huetorgb","color.prototype.sethsl","color.prototype.gethsl","color.prototype.gethue","color.prototype.sethue","color.prototype.getsaturation","color.prototype.setsaturation","color.prototype.getbrightness","color.prototype.getlightness","color.prototype.setlightness","color.prototype.sethsv","color.prototype.gethsv","color.prototype.flattenarguments","color.prototype.argstoarray","color.prototype.isstring","color.prototype.isint","color.prototype.isfloat","color.prototype.allfloats","color.prototype.allints","color.prototype.allstrings","color.prototype.ispercentage","color.prototype.getrandomrgb","color.prototype.getrandomcolor","color.prototype.ishex","color.prototype.istype","color.prototype.clamp","color.prototype.iscolorinstance","keycodes","objectmanager","objectmanager.prototype.register","objectmanager.prototype.disposeof","clone","flatclone","loadurl","strip","dynamicgeometry","dynamicgeometry.prototype.getvertexbuffer","dynamicgeometry.prototype.setvertexbuffer","dynamicgeometry.prototype.fromgeometry","dynamicgeometry.prototype.setvertexpositions","dynamicgeometry.prototype.setnormals","dynamicgeometry.prototype.settexturecoords","dynamicgeometry.prototype.settexturecoords","dynamicgeometry.prototype.setdrawtype","dynamicgeometry.prototype.getvertexpositions","dynamicgeometry.prototype.getnormals","dynamicgeometry.prototype.gettexturecoords","geometry","geometryhelper","geometryhelper.prototype.generateparametric","geometryhelper.prototype.computenormals","geometryhelper.prototype.subdivide","geometryhelper.prototype.getuniquefaces","geometryhelper.prototype.subdivide","geometryhelper.prototype.getspheroidnormals","geometryhelper.prototype.getspheroiduv","geometryhelper.prototype.normalizeall","geometryhelper.prototype.normalizevertices","geometryhelper.prototype.gettranslationfactor","geometryhelper.prototype.getscalefactor","geometryhelper.prototype.getazimuth","geometryhelper.prototype.getaltitude","geometryhelper.prototype.trianglestolines","circle","circle.prototype.getbuffers","cylinder","cylinder.prototype.generator","geodesicsphere","icosahedron","parametriccone","parametriccone.prototype.generator","plane","sphere.prototype.generator","tetrahedron","torus","torus.prototype.generator","triangle","material","material.prototype.traverse","material.prototype._compile","mesh","mesh.prototype.tostring","mesh._receivetransformchange","mesh._receivesizechange","mesh._receiveopacitychange","mesh.prototype.getsize","mesh.prototype.setgeometry","mesh.prototype.getgeometry","mesh.prototype.clean","mesh.prototype.setbasecolor","mesh.prototype.getbasecolor","mesh.prototype.setflatshading","mesh.prototype.getflatshading","mesh.prototype.normal","mesh.prototype.getnormals","mesh.prototype.setglossiness","mesh.prototype.getglossiness","mesh.prototype.metallic","mesh.prototype.getmetallness","mesh.prototype.setpositionoffset","mesh.prototype.getpositionoffset","mesh.prototype.setoptions","ambientlight","ambientlight.prototype.tostring","ambientlight.constructor","light","light.prototype.tostring","light.prototype.setcolor","light.prototype.getcolor","light.prototype.clean","pointlight","pointlight.prototype.tostring","pointlight.constructor","pointlight._receivetransformchange","buffer","buffer.prototype.subdata","bufferregistry","bufferregistry.prototype.allocate","program","program.prototype.registermaterial","program.prototype.resetprogram","program.prototype.uniformiscached","program.prototype.setuniforms","program.prototype.compileshader","texture","texture.prototype.bind","texture.prototype.unbind","texture.prototype.setimage","texture.prototype.setarray","texture.prototype.readback","webglrenderer","webglrenderer.numlights","webglrenderer.prototype.getwebglcontext","webglrenderer.prototype.createlight","webglrenderer.prototype.createmesh","webglrenderer.prototype.receive","webglrenderer.prototype.draw","webglrenderer.prototype.drawbuffers","webglrenderer.prototype.renderoffscreen","webglrenderer.prototype.checkframebufferstatus","webglrenderer.prototype.updatesize","webglrenderer.prototype.handleoptions","webglrenderer.prototype.resetoptions","webglrenderer.prototype.loadimage","webglrenderer.prototype.handletexture"],"info":[["Align","","components/Align.html","(dispatch)",""],["Align.toString","Align","components/Align.html#toString","()","<p>stringifies Align</p>"],["Align.clean","Align","components/Align.html#clean","()","<p>If true, component is to be updated on next engine tick</p>"],["Camera","","components/Camera.html","(RenderNode)",""],["EventEmitter","","components/EventEmitter.html","(dispatch)","<p>Component to manage general event emission.</p>"],["EventEmitter.prototype.toString","EventEmitter","components/EventEmitter.html#toString","()","<p>Returns the name of EventEmitter as a string.</p>"],["EventEmitter.prototype.emit","EventEmitter","components/EventEmitter.html#emit","(event, payload)","<p>Emit an event with a payload.</p>"],["EventHandler","","components/EventHandler.html","(dispatch, events)","<p>Component to handle general events.</p>"],["EventHandler.prototype.toString","EventHandler","components/EventHandler.html#toString","()","<p>Returns the name of EventHandler as a string.</p>"],["EventHandler.prototype.on","EventHandler","components/EventHandler.html#on","(ev, cb)","<p>Register a callback to be invoked on an event.</p>"],["EventHandler.prototype.on","EventHandler","components/EventHandler.html#on","(ev, cb)","<p>Deregister a callback from an event.</p>"],["EventHandler.prototype.trigger","EventHandler","components/EventHandler.html#trigger","(ev, payload)","<p>Trigger the callback associated with an event, passing in a payload.</p>"],["GestureHandler","","components/GestureHandler.html","(dispatch, events)","<p>Component to manage gesture events. Will track 'pinch', 'rotate', 'tap', and 'drag' events, on an\nas-requested basis.</p>"],["GestureHandler.prototype.toString","GestureHandler","components/GestureHandler.html#toString","()","<p>Returns the name of GestureHandler as a string.</p>"],["GestureHandler.prototype.triggerGestures","GestureHandler","components/GestureHandler.html#triggerGestures","()","<p>Trigger gestures in the order they were requested, if they occured.</p>"],["GestureHandler.prototype.trigger","GestureHandler","components/GestureHandler.html#trigger","(ev, payload)","<p>Trigger the callback associated with an event, passing in a payload.</p>"],["GestureHandler.prototype._processPointerStart","GestureHandler","components/GestureHandler.html#_processPointerStart","(e)","<p>Process up to the first two touch/mouse move events. Exit out if the first two points are already being tracked.</p>"],["GestureHandler.prototype._processPointerMove","GestureHandler","components/GestureHandler.html#_processPointerMove","(e)","<p>Process up to the first two touch/mouse move events.</p>"],["GestureHandler.prototype._processPointerEnd","GestureHandler","components/GestureHandler.html#_processPointerEnd","(e)","<p>Process up to the first two touch/mouse end events. Exit out if the two points being tracked are still active.</p>"],["GestureHandler.prototype._processMouseLeave","GestureHandler","components/GestureHandler.html#_processMouseLeave","(e)","<p>Treats a mouseleave event as a gesture end.</p>"],["MountPoint","","components/MountPoint.html","(dispatch)",""],["MountPoint.toString","MountPoint","components/MountPoint.html#toString","()","<p>Stringifies MountPoint</p>"],["MountPoint.clean","MountPoint","components/MountPoint.html#clean","()","<p>If true, component is to be updated on next engine tick</p>"],["Opacity","","components/Opacity.html","(dispatch)",""],["Opacity.toString","Opacity","components/Opacity.html#toString","()","<p>returns stringified Opacity</p>"],["Opacity.getState","Opacity","components/Opacity.html#getState","()","<p>Retrieves state of Opacity</p>"],["Opacity.setState","Opacity","components/Opacity.html#setState","(state)","<p>Setter for Opacity state</p>"],["Opacity.clean","Opacity","components/Opacity.html#clean","()","<p>If true, component is to be updated on next engine tick</p>"],["Opacity.set","Opacity","components/Opacity.html#set","(value, options, callback)","<p>Setter for Opacity with callback</p>"],["Opacity.get","Opacity","components/Opacity.html#get","()","<p>Getter for Opacity</p>"],["Opacity.halt","Opacity","components/Opacity.html#halt","()","<p>Stops Opacity transition</p>"],["Origin","","components/Origin.html","(dispatch)",""],["Origin.toString","Origin","components/Origin.html#toString","()","<p>returns stringified Origin</p>"],["Origin.clean","Origin","components/Origin.html#clean","()","<p>If true, component is to be updated on next engine tick</p>"],["Position","","components/Position.html","(dispatch)",""],["Position.toString","Position","components/Position.html#toString","()","<p>stringifies Position constructor</p>"],["Position.getState","Position","components/Position.html#getState","()","<p>Gets object containing stringified constructor, x, y, z coordinates</p>"],["Position.setState","Position","components/Position.html#setState","(state)","<p>Setter for position coordinates</p>"],["Position.getX","Position","components/Position.html#getX","()","<p>Getter for X position</p>"],["Position.getY","Position","components/Position.html#getY","()","<p>Getter for Y position</p>"],["Position.getZ","Position","components/Position.html#getZ","()","<p>Getter for Z position</p>"],["Position.isActive","Position","components/Position.html#isActive","()","<p>Getter for any active coordinates</p>"],["Position.clean","Position","components/Position.html#clean","()","<p>If true, component is to be updated on next engine tick</p>"],["Position.setX","Position","components/Position.html#setX","(val, options, callback)","<p>Setter for X position</p>"],["Position.setY","Position","components/Position.html#setY","(val, options, callback)","<p>Setter for Y position</p>"],["Position.setZ","Position","components/Position.html#setZ","(val, options, callback)","<p>Setter for Z position</p>"],["Position.set","Position","components/Position.html#set","(x, y, z, options, callback)","<p>Setter for XYZ position with callback</p>"],["Position.halt","Position","components/Position.html#halt","()","<p>Stops transition of Position component</p>"],["Rotation","","components/Rotation.html","(dispatch)",""],["Rotation.toString","Rotation","components/Rotation.html#toString","()","<p>stringifies Rotation</p>"],["Rotation.clean","Rotation","components/Rotation.html#clean","()","<p>If true, component is to be updated on next engine tick</p>"],["Scale","","components/Scale.html","(dispatch)",""],["Scale.toString","Scale","components/Scale.html#toString","()","<p>stringifies Scale</p>"],["Scale.clean","Scale","components/Scale.html#clean","()","<p>If true, component is to be updated on next engine tick</p>"],["Size","","components/Size.html","(dispatch)",""],["Size.toString","Size","components/Size.html#toString","()","<p>stringifies Size</p>"],["Size.getState","Size","components/Size.html#getState","()","<p>Returns state object</p>"],["Size.setState","Size","components/Size.html#setState","(state)","<p>Sets state of size</p>"],["Size.clean","Size","components/Size.html#clean","()","<p>If true, component is to be updated on next engine tick</p>"],["Size.setAbsolute","Size","components/Size.html#setAbsolute","(x, y, z, options, callback)","<p>Sets absolute Size</p>"],["Size.get","Size","components/Size.html#get","()","<p>Size getter method</p>"],["UIEventHandler","","components/UIEventHandler.html","(dispatch, events)","<p>Component to manage DOM events. When registering an event, the user may specify .methods and\n.properties to preprocess the event object.</p>"],["UIEventHandler.prototype.toString","UIEventHandler","components/UIEventHandler.html#toString","()","<p>Returns the name of UIEventHandler as a string.</p>"],["UIEventHandler.prototype.trigger","UIEventHandler","components/UIEventHandler.html#trigger","(ev, payload)","<p>Trigger the callback associated with an event, passing in a payload.</p>"],["Align","","core/Align.html","()","<p>Layout is often easily described in terms of &quot;top left&quot;, &quot;bottom right&quot;,\netc. Align is a way of defining an alignment relative to a bounding-box\ngiven by a size. Align is given by an array [x, y, z] of proportions betwee\n0 and 1. The default value for the align is top left, or [0, 0, 0].</p>"],["Align.prototype.setX","Align","core/Align.html#setX","(x)","<p>Sets the alignment in x direction relative to its parent.</p>"],["Align.prototype.setX","Align","core/Align.html#setX","(y)","<p>Sets the alignment in y direction relative to its parent.</p>"],["Align.prototype.setX","Align","core/Align.html#setX","(z)","<p>Sets the alignment in z direction relative to its parent.</p>"],["Align.prototype.set","Align","core/Align.html#set","(x, y, z)","<p>Sets the alignment relative to its parent.</p>"],["Align.prototype.update","Align","core/Align.html#update","(size)","<p>Mutates the internal transform matrix according to the passed in size</p>"],["Clock","","core/Clock.html","()","<p>Equivalent of an Engine in the Worker Thread. Used to synchronize and manage\ntime across different Threads.</p>"],["Clock.prototype.step","Clock","core/Clock.html#step","(time)","<p>Updates the internal clock time.</p>"],["Clock.prototype.update","Clock","core/Clock.html#update","(updateable)","<p>Registers an object to be updated on every frame.</p>"],["Clock.prototype.noLongerUpdate","Clock","core/Clock.html#noLongerUpdate","(updateable)","<p>Deregisters a previously using <code>update</code> registered object to be no longer\nupdated on every frame.</p>"],["Clock.prototype.getTime","Clock","core/Clock.html#getTime","(time)","<p>Returns the internal clock time.</p>"],["Clock.prototype.nextStep","Clock","core/Clock.html#nextStep","(updateable)","<p>Registers object to be updated <strong>once</strong> on the next step. Registered\nupdateables are not guaranteed to be unique, therefore multiple updates per\nstep per object are possible.</p>"],["Clock.prototype.setTimeout","Clock","core/Clock.html#setTimeout","(callback, delay)","<p>Wraps a function to be invoked after a certain amount of time.\nAfter a set duration has passed, it executes the function and\nremoves it as a listener to 'prerender'.</p>"],["Clock.prototype.clearTimer","Clock","core/Clock.html#clearTimer","(callback)","<p>Removes previously via <code>Clock#setTimeout</code> or <code>Clock#setInterval</code>\nregistered callback function</p>"],["Clock.prototype.setInterval","Clock","core/Clock.html#setInterval","(callback, duration)","<p>Wraps a function to be invoked after a certain amount of time.\n After a set duration has passed, it executes the function and\n resets the execution time.</p>"],["ComponentStore","","core/ComponentStore.html","()","<p>ComponentStore manages <code>components</code> and <code>renderables</code>. It also keeps track\nof the size shared by all renderables managed by this ComponentStore.</p>\n<p>Every LocalDispatch has its own ComponentStore.</p>"],["ComponentStore.prototype.clearComponents","ComponentStore","core/ComponentStore.html#clearComponents","()","<p>Clears all components by delegating to the layer they are being managed on.</p>"],["ComponentStore.prototype.clearRenderables","ComponentStore","core/ComponentStore.html#clearRenderables","()","<p>Clears all renderables by delegating to the layer they are being managed on.</p>"],["ComponentStore.prototype.clear","ComponentStore","core/ComponentStore.html#clear","()","<p>Clears all components and renderables managed by this ComponentStore by\ndelegating to the respective layers.</p>"],["ComponentStore.clear","ComponentStore","core/ComponentStore.html#clear","",""],["ComponentStore.prototype.cleanComponents","ComponentStore","core/ComponentStore.html#cleanComponents","()","<p>Cleans the underlying layer responsible for maintaining components.</p>"],["ComponentStore.prototype.cleanRenderables","ComponentStore","core/ComponentStore.html#cleanRenderables","()","<p>Cleans the underlying layer responsible for maintaining renderables.</p>"],["ComponentStore.prototype.clean","ComponentStore","core/ComponentStore.html#clean","()","<p>Cleans the renderables and components managed by this ComponentStore.</p>"],["ComponentStore.prototype.requestComponentId","ComponentStore","core/ComponentStore.html#requestComponentId","()","<p>Returns a new component id that can be used in order to register a new\ncomponent on the ComponentStore using <code>registerComponentAt</code>.</p>"],["ComponentStore.prototype.requestComponentId","ComponentStore","core/ComponentStore.html#requestComponentId","()","<p>Returns a new renderable id that can be used in order to register a new\nrenderable on the ComponentStore using <code>registerRenderableAt</code>.</p>"],["ComponentStore.prototype.registerComponentAt","ComponentStore","core/ComponentStore.html#registerComponentAt","(id, component)","<p>Registers the passed in component on the ComponentStore at the specified id.</p>"],["ComponentStore.prototype.registerRenderableAt","ComponentStore","core/ComponentStore.html#registerRenderableAt","(id, component)","<p>Registers the passed in renderable on the ComponentStore at the specified\nid.</p>"],["ComponentStore.prototype.makeComponentDirtyAt","ComponentStore","core/ComponentStore.html#makeComponentDirtyAt","(id)","<p>Dirties the component registered at the specified id.</p>"],["ComponentStore.prototype.makeRenderableDirtyAt","ComponentStore","core/ComponentStore.html#makeRenderableDirtyAt","(id)","<p>Dirties the renderable registered at the specified id.</p>"],["ComponentStore.prototype.cleanComponentAt","ComponentStore","core/ComponentStore.html#cleanComponentAt","(id)","<p>Cleans the component registered at the specified id.</p>"],["ComponentStore.prototype.cleanRenderableAt","ComponentStore","core/ComponentStore.html#cleanRenderableAt","(id)","<p>Cleans the renderable registered at the specified id.</p>"],["ComponentStore.prototype.getComponentAt","ComponentStore","core/ComponentStore.html#getComponentAt","(id)","<p>Retrieves the component registered at the specified id.</p>"],["ComponentStore.prototype.getRenderableAt","ComponentStore","core/ComponentStore.html#getRenderableAt","(id)","<p>Retrieves the renderable registered at the specified id.</p>"],["ComponentStore.prototype.getComponents","ComponentStore","core/ComponentStore.html#getComponents","()","<p>Retrieves all components registered on this ComponentStore.</p>"],["ComponentStore.prototype.getRenderable","ComponentStore","core/ComponentStore.html#getRenderable","()","<p>Retrieves all renderables registered on this ComponentStore.</p>"],["ComponentStore.prototype.getRenderableSize","ComponentStore","core/ComponentStore.html#getRenderableSize","()","<p>Determines and returns the absolute, three dimensional <strong>pixel</strong> size\nallocated to renderables on this ComponentStore.</p>"],["Context","","core/Context.html","(selector)","<p>Context is the top-level node in the scene graph (= tree node).\nAs such, it populates the internal MessageQueue with commands received by\nsubsequent child-nodes. The Context is being updated by the Clock on every\nFRAME and therefore recursively updates the scene grpah.</p>"],["Context.prototype.addChild","Context","core/Context.html#addChild","()","<p>Adds a child to the internal list of child-nodes.</p>"],["Context.prototype.removeChild","Context","core/Context.html#removeChild","(node)","<p>Removes a node returned by <code>addChild</code> from the Context's immediate children.</p>"],["Context.prototype.update","Context","core/Context.html#update","()","<p>Recursively updates all children.</p>"],["Context.prototype.getRenderPath","Context","core/Context.html#getRenderPath","()","<p>Returns the selector the Context is attached to. Terminates recursive\n<code>getRenderPath</code> scheduled by <code>RenderProxy</code>.</p>"],["Context.prototype.receive","Context","core/Context.html#receive","(command)","<p>Appends the passed in command to the internal MessageQueue, thus scheduling\nit to be sent to the Main Thread on the next FRAME.</p>"],["Context.prototype._receiveContextSize","Context","core/Context.html#_receiveContextSize","(size)","<p>Method being executed whenever the context size changes.</p>"],["Famous","","core/Famous.html","()","<p>Famous is the toplevel object being exposed as a singleton inside the Web\nWorker. It holds a reference to a Clock, MessageQueue and triggers events\non the GlobalDispatch. Incoming messages being sent from the Main Thread\nare defined by the following production rules (EBNF):</p>\n<p>message = { commmand }\ncommand = frame_command | with_command\nframe_command = &quot;FRAME&quot;, unix_timestamp\nwith_command = selector, { action }\naction = &quot;TRIGGER&quot;, event_type, event_object</p>"],["Famous.prototype.step","Famous","core/Famous.html#step","(time)","<p>Updates the internal Clock and flushes (clears and sends) the MessageQueue\nto the Main Thread. step(time) is being called every time the Worker\nreceives a FRAME command.</p>"],["Famous.prototype.postMessage","Famous","core/Famous.html#postMessage","(message)","<p>postMessage(message) is being called every time the Worker Thread receives a\nmessage from the Main Thread. <code>postMessage</code> is being used as a method name\nto expose the same API as an actual Worker would. This drastically reduces\nthe complexity of maintaining a workerless build.</p>"],["Famous.prototype.handleFrame","Famous","core/Famous.html#handleFrame","(message)","<p>Handles the FRAME command by removing FRAME and the unix timstamp from the\nincoming message.</p>"],["Famous.prototype.handleWith","Famous","core/Famous.html#handleWith","(message)","<p>Handles the WITH (and TRIGGER) command. Triggers the respective targeted\ncallbacks of the internal GlobalDispatch.</p>"],["Famous.prototype.onmessage","Famous","core/Famous.html#onmessage","()","<p>Intended to be overridden by the ThreadManager to maintain compatibility\nwith the Web Worker API.</p>"],["Famous.prototype.getClock","Famous","core/Famous.html#getClock","()","<p>Returns the internal Clock, which can be used to schedule updates on a\nframe-by-frame basis.</p>"],["Famous.prototype.getMessageQueue","Famous","core/Famous.html#getMessageQueue","()","<p>Returns the internal MessageQueue, which can be used to schedule messages\nto be sent on the next tick.</p>"],["Famous.prototype.getGlobalDispatch","Famous","core/Famous.html#getGlobalDispatch","()","<p>Returns the interal GlobalDispatch, which can be used to register event\nlisteners for global (same depth) or targeted (same path) events.</p>"],["GlobalDispatch","","core/GlobalDispatch.html","()","<p>GlobalDispatch is being used in order to manage scene graph events. It\nroutes and manages events being registered on specific nodes, but also\nprovides the possibility to globally register event listeners on the\nwhole scene graph.</p>"],["GlobalDispatch.prototype.targetedTrigger","GlobalDispatch","core/GlobalDispatch.html#targetedTrigger","(path, key, ev)","<p>Triggers the <code>event</code> defined by <code>key</code> (type of event) on a Node in the\nscene graph hierarchy defined as a series of RenderProxy id's composing the\npath exactly that Node.</p>"],["GlobalDispatch.prototype.targetedOn","GlobalDispatch","core/GlobalDispatch.html#targetedOn","(path, key, cb)","<p>Registers an event listener for an event being emitted on a specific node in\nthe scene graph hierarchy.</p>"],["GlobalDispatch.prototype.targetedOff","GlobalDispatch","core/GlobalDispatch.html#targetedOff","(path, key, cb)","<p>Removes a previously via <code>targetedOn</code> registered event listener,</p>"],["GlobalDispatch.prototype.globalOn","GlobalDispatch","core/GlobalDispatch.html#globalOn","(path, key, cb)","<p>Globally registers an event listener. Listeners registerd using this method\ncan not be triggered by their path, but only globally by the event they\nhave been registered on.</p>"],["GlobalDispatch.prototype.globalOn","GlobalDispatch","core/GlobalDispatch.html#globalOn","(path, key, cb)","<p>Removed an event listener that has previously been registered using\n<code>globalOn</code>.</p>"],["GlobalDispatch.prototype.emit","GlobalDispatch","core/GlobalDispatch.html#emit","(key, ev)","<p>Triggers all global event listeners registered on the specified type.</p>"],["Layer","","core/Layer.html","()","<p>Layers manage a set of components or renderables.\nComponents are expected to expose a <code>kill</code> method. Optionally they can\nexpose a clean method which will be called as soon as the layer they are\nregistered on is being cleaned and they are being dirty.</p>"],["Layer.prototype.clear","Layer","core/Layer.html#clear","()","<p>Clears all components by <code>kill</code>ing all components having <code>kill</code> set to a\ntruthy value and removing them from the Layer.</p>"],["Layer.prototype.requestId","Layer","core/Layer.html#requestId","()","<p>Returns an id which can be used in order to register a new component using\n<code>registerAt</code>.</p>"],["Layer.prototype.registerAt","Layer","core/Layer.html#registerAt","(id, component)","<p>Registers the passed in component on the specified id. Does not dirty the\ncomponent.</p>"],["Layer.prototype.dirtyAt","Layer","core/Layer.html#dirtyAt","(id)","<p>Dirties the component regsitered at the specified id.</p>"],["Layer.prototype.cleanAt","Layer","core/Layer.html#cleanAt","(id)","<p>Cleans the component registered at the specified id.</p>"],["Layer.prototype.clean","Layer","core/Layer.html#clean","()","<p>Cleans all previously dirtied components.</p>"],["Layer.prototype.getAt","Layer","core/Layer.html#getAt","(id)","<p>Returns the component registered at the specified id.</p>"],["Layer.prototype.get","Layer","core/Layer.html#get","()","<p>Returns set of all registered components.</p>"],["LocalDispatch","","core/LocalDispatch.html","(node, proxy)","<p>As opposed to a Node, a LocalDispatch does not define hierarchical\nstructures within the scene graph. Thus removing the need to manage\nchildren, but at the same time requiring the Node to delegate updates to its\nown LocalDispatch and all subsequent Nodes.</p>\n<p>The primary responsibilty of the LocalDispatch is to provide the ability to\nregister events on a specific Node (&quot;targeted events&quot;), without inducing the\ncomplexity of determining the Nodes location within the scene graph.</p>\n<p>It also holds a reference to a RenderContext, therefore being required to\ndelegate invocations of its update function to its RenderContext, which\nconsequently mutates the actual 3D transform matrix associated with the\nNode.</p>"],["LocalDispatch.prototype.kill","LocalDispatch","core/LocalDispatch.html#kill","()","<p>Kills the componentstore of the LocalDispatchm therefore killing all\nRenderables and Components registered for the managed node.</p>"],["LocalDispatch.prototype.getNode","LocalDispatch","core/LocalDispatch.html#getNode","()","<p>Returns the managed Node.</p>"],["LocalDispatch.prototype.getContext","LocalDispatch","core/LocalDispatch.html#getContext","()","<p>Retrieves the RenderContext managed by the LocalDispatch.</p>"],["LocalDispatch.prototype.getRenderPath","LocalDispatch","core/LocalDispatch.html#getRenderPath","()","<p>Returns the RenderPath uniquely identifiying the Node managed by the\nLocalDispatch in the scene graph.</p>"],["LocalDispatch.prototype.getRenderProxy","LocalDispatch","core/LocalDispatch.html#getRenderProxy","()","<p>Returns the RenderProxy managed by the LocalDispatch.</p>"],["LocalDispatch.prototype.registerTargetedEvent","LocalDispatch","core/LocalDispatch.html#registerTargetedEvent","(event, cb)","<p>Registers an event listener to be triggered whenever the specified event is\nbeing triggered on the path defined by the RenderProxy attached to the\nLocalDispatch describing the Node's location in the Scene graph.</p>"],["LocalDispatch.prototype.registerGlobalEvent","LocalDispatch","core/LocalDispatch.html#registerGlobalEvent","(event, cb)","<p>Register a global event event listener to be triggered whenever the\nspecified event is being triggered. Global in the context of events being\nemitted in the scene graph means events being emitted on the same depth as\nthe Node.</p>"],["LocalDispatch.prototype.deregisterGlobalEvent","LocalDispatch","core/LocalDispatch.html#deregisterGlobalEvent","(event, cb)","<p>Deregisters a global event listener that has previously been registered\nusing <code>registerGlobalEvent</code>.</p>"],["LocalDispatch.emit","LocalDispatch","core/LocalDispatch.html#emit","(event, payload)","<p>Triggers an event on the Node attached to the LocalDispatch. Events are\nbeing managed by the GlobalDispatch.</p>"],["LocalDispatch.prototype.cleanCompoents","LocalDispatch","core/LocalDispatch.html#cleanCompoents","()","<p>Cleans all components associated with this component store.</p>"],["LocalDispatch.prototype.cleanRenderContext","LocalDispatch","core/LocalDispatch.html#cleanRenderContext","(parentNode)","<p>Cleans (updates) the RenderContext attached to this LocalDispatch.</p>"],["LocalDispatch.prototype.cleanRenderables","LocalDispatch","core/LocalDispatch.html#cleanRenderables","()","<p>Cleans the underlying Layer managing renderables indirectly attached to the\nLocalDispatch.</p>"],["LocalDispatch.prototype.addComponent","LocalDispatch","core/LocalDispatch.html#addComponent","(component)","<p>Adds a component to the underlying ComponentStore.</p>"],["LocalDispatch.prototype.dirtyComponent","LocalDispatch","core/LocalDispatch.html#dirtyComponent","(id)","<p>Dirties the component registered at the specified id.\nThe id has typically been obtained using a previous invocation of\n<code>addComponent</code>.</p>"],["LocalDispatch.prototype.addRenderable","LocalDispatch","core/LocalDispatch.html#addRenderable","(renderable)","<p>Adds a renderable to the underlying ComponentStore.</p>"],["LocalDispatch.prototype.dirtyRenderable","LocalDispatch","core/LocalDispatch.html#dirtyRenderable","(id)","<p>Dirties the renderable registered at the specified id.</p>"],["MessageQueue","","core/MessageQueue.html","()","<p>Used for scheduling messages to be sent on the next FRAME.\nThe MessageQueue is being cleared after each <code>postMessage</code> in the <code>Famous</code>\nsingleton.</p>"],["MessageQueue.prototype.enqueue","MessageQueue","core/MessageQueue.html#enqueue","(message)","<p>Pushes a message to the end of the queue to be sent on the next FRAME.</p>"],["MessageQueue.prototype.getAll","MessageQueue","core/MessageQueue.html#getAll","()","<p>Returns an array of all messages currently scheduled for the next FRAME.</p>"],["MessageQueue.prototype.clear","MessageQueue","core/MessageQueue.html#clear","()","<p>Empties the queue.</p>"],["MountPoint","Align","core/MountPoint.html","()",""],["Node","","core/Node.html","(proxy, globalDispatch, localDispatch)","<p>Nodes define hierarchy in the scene graph.</p>"],["Node.prototype.addChild","Node","core/Node.html#addChild","(index)","<p>Adds a child at the specified index. If index is <code>undefined</code>, the child\nwill be pushed to the end of the internal children array.</p>"],["Node.prototype.removeChild","Node","core/Node.html#removeChild","(node)","<p>Removes the passed in node from the node's children. If the node is not an\nimmediate child of the node the method is being called on, the method will\nfail silently.</p>"],["Node.prototype.removeChildAtIndex","Node","core/Node.html#removeChildAtIndex","(index)","<p>Removes the child node at the specified index. E.g. removeChild(0) removes\nthe node's first child, which consequently changes all remanining indices.</p>"],["Node.prototype.removeAllChildren","Node","core/Node.html#removeAllChildren","()","<p>Removes all children attached to this node.</p>"],["Node.prototype.kill","Node","core/Node.html#kill","()","<p>Kills the Node by killing its local dispatch and removing all its children.\nUsed internally whenever a child is being removed.</p>"],["Node.prototype.getDispatch","Node","core/Node.html#getDispatch","()","<p>Returns the local dispatch attached to this node.</p>"],["Node.prototype.getChildren","Node","core/Node.html#getChildren","()","<p>Returns the Node's children.</p>"],["Node.prototype.update","Node","core/Node.html#update","(parent)","<p>Recursively updates the node and all its children.</p>"],["Opacity","","core/Opacity.html","()","<p>Initilizes the Opacity primitive by settings its value to 1 (default value).\nHierarchically setting opacity does not affect the final, local opacity\nbeing returned. Rather, this functionality needs to be implemented in the\ncorresponding render targets (e.g. DOM has blending by default).</p>"],["Opacity.prototype.set","Opacity","core/Opacity.html#set","(value)","<p>Sets, activates and dirties the internal notion of opacity being read by the\nRenderContext.</p>"],["Opacity.prototype.setDirty","Opacity","core/Opacity.html#setDirty","()","<p>Dirties the opacity.\nThis forces the RenderContext to trigger the <code>opacity</code> event on the next\ninvocation of the <code>update</code> method on RenderContext.</p>"],["Opacity.prototype.clean","Opacity","core/Opacity.html#clean","()","<p>Cleans the opacity. This sets its dirty flag to <code>false</code>, thus no longer\nreading it in <code>update</code> of the RenderContext.</p>"],["Origin","","core/Origin.html","()","<p>The origin primitive defines the relative position of a point within a\nRenderContext that should be used to apply further transformations on.</p>"],["Origin.prototype.set","Origin","core/Origin.html#set","(x, y, z)","<p>Sets the relative position of the origin.</p>"],["Proxy","","core/Proxy.html","(target, messageQueue, proxyRegistry)","<p>Proxies provide a way to access arbitrary global objects within a WebWorker.</p>"],["RenderContext","","core/RenderContext.html","(dispatch)","<p>A RenderContext does not have a notion of a nested scene graph hierarchy.\nIts sole purpose it to manage the <code>origin</code>, <code>opacity</code>, <code>mountPoint</code>,\n<code>align</code> and <code>size</code> primitives primitives by updating its internal transform\nmatrix.</p>\n<p>The RenderContext is being created by a LocalDisaptch, which delegates to\nthe RenderContext's update method on every <code>FRAME</code> in order to apply\ncorresponding updates to the transform matrix attached to the node and all\nits children. While the scene graph is being traversed recursively, the RenderContext\ndoes not have a notion of children. Instead, the Node recursively updates\nits LocalDispatch (and therefore its RenderContext) and all its children.</p>"],["RenderContext.prototype.onTransformChange","RenderContext","core/RenderContext.html#onTransformChange","(cb)","<p>Registers a callback function to be invoked whenever the transform attached\nto the RenderContext changes.</p>"],["RenderContext.prototype.offTransformChange","RenderContext","core/RenderContext.html#offTransformChange","(cb)","<p>Deregisters a callback function previously attached to the <code>transform</code>\nevent using <code>onTransformChange</code>.</p>"],["RenderContext.prototype.onSizeChange","RenderContext","core/RenderContext.html#onSizeChange","(cb)","<p>Registers a callback function to be invoked whenever the size of the\nRenderContext changes.</p>"],["RenderContext.prototype.offSizeChange","RenderContext","core/RenderContext.html#offSizeChange","(cb)","<p>Deregisters a callback function previously attached to the <code>size</code>\nevent using <code>onSizeChange</code>.</p>"],["RenderContext.prototype.onTransformChange","RenderContext","core/RenderContext.html#onTransformChange","(cb)","<p>Registers a callback function to be invoked whenever the transform attached\nto the RenderContext changes.</p>"],["RenderContext.prototype.offTransformChange","RenderContext","core/RenderContext.html#offTransformChange","(cb)","<p>Deregisters a callback function previously attached to the <code>transform</code>\nevent using <code>onTransformChange</code>.</p>"],["RenderContext.prototype.setOpacity","RenderContext","core/RenderContext.html#setOpacity","(opacity)","<p>Sets the opacity of the RenderContext.</p>"],["RenderContext.prototype.setPosition","RenderContext","core/RenderContext.html#setPosition","(x, y, z)","<p>Sets the position of the RenderContext.</p>"],["RenderContext.prototype.setAbsolute","RenderContext","core/RenderContext.html#setAbsolute","(x, y, z)","<p>Sets the absolute size of the RenderContext.</p>"],["RenderContext.prototype.getSize","RenderContext","core/RenderContext.html#getSize","()","<p>Returns the absolute (pixel) size of the RenderContext.</p>"],["RenderContext.prototype.setProportions","RenderContext","core/RenderContext.html#setProportions","(x, y, z)","<p>Sets the proportional size of the RenderContext, relative to its parent.</p>"],["RenderContext.prototype.setDifferntial","RenderContext","core/RenderContext.html#setDifferntial","(x, y, z)","<p>Sets the differential size of the RenderContext. Differential sizing enables\nadding an additional offset after applying an absolute and proportional size.</p>"],["RenderContext.prototype.setRotation","RenderContext","core/RenderContext.html#setRotation","(x, y, z)","<p>Sets the rotation of the RenderContext in euler angles.</p>"],["RenderContext.prototype.setScale","RenderContext","core/RenderContext.html#setScale","(x, y, z)","<p>Sets the three dimensional scale of the RenderContext.</p>"],["RenderContext.prototype.setAlign","RenderContext","core/RenderContext.html#setAlign","(x, y, z)","<p>Sets the align of the RenderContext.</p>"],["RenderContext.prototype.setOrigin","RenderContext","core/RenderContext.html#setOrigin","(x, y, z)","<p>Sets the origin of the RenderContext.</p>"],["RenderContext.prototype.setMountPoint","RenderContext","core/RenderContext.html#setMountPoint","(x, y, z)","<p>Sets the mount point of the RenderContext.\nTODO Come up with some nice ASCII art</p>"],["RenderContext.prototype.update","RenderContext","core/RenderContext.html#update","(parentContext)","<p>Updates the RenderContext's internal transform matrix and emits\ncorresponding change events. Takes into account the parentContext's size\ninvalidations in order to maintain high throughput while still updating the\nentire scene graph on every FRAME command.</p>"],["RenderProxy","","core/RenderProxy.html","(parent)","<p>RenderProxy recursively delegates commands to its parent in order to queue\nmessages to be sent on the next FRAME and uniquely identifies the node it is\nbeing managed by in the scene graph by exposing a global <code>path</code> describing\nits location.</p>"],["RenderProxy.prototype.getRenderPath","RenderProxy","core/RenderProxy.html#getRenderPath","()","<p>Retrieves the renderpath</p>"],["RenderProxy.prototype.receive","RenderProxy","core/RenderProxy.html#receive","(command)","<p>Appends a command to the MessageQueue by recursively passing it up to its\nparent until the top-level Context is being reached.</p>"],["Size","","core/Size.html","(context)","<p>The size primitive is being used internally by the RenderContext to manage\nand update its respective transform matrix. It doesn't expose user-facing\nAPIs, but instead is being exposed on the RenderContext level in form of\nvarious methods, e.g. <code>setProportional</code> and <code>setAbsolute</code>.</p>"],["Size.prototype.get","Size","core/Size.html#get","()","<p>Retrieves the current top-down, absolute pixel size. Incorporates it parent size.</p>"],["Size.prototype.setProportions","Size","core/Size.html#setProportions","(x, y, z)","<p>Sets the proportional size.</p>"],["Size.prototype.setDifferential","Size","core/Size.html#setDifferential","(x, y, z)","<p>Sets the differential size.</p>"],["Size.prototype._setAbsolute","Size","core/Size.html#_setAbsolute","(x, y, z)","<p>Internal helper function called by <code>setAbsolute</code> in order to update the absolute size.</p>"],["Size.prototype.setAbsolute","Size","core/Size.html#setAbsolute","(x, y, z)","<p>Updates the internal notion of absolute sizing.</p>"],["Size.prototype.getTopDownSize","Size","core/Size.html#getTopDownSize","()","<p>Retrieves the top-down size.</p>"],["Size.prototype._update","Size","core/Size.html#_update","(parentReport, parentSize)","<p>Updates the size according to previously set invalidations.</p>"],["Size.prototype.toIdentity","Size","core/Size.html#toIdentity","()","<p>Resets the internal managed size (parent size). Invalidates the primitive\nand therefore recalculates the size on the next invocation of the _update\nfunction.</p>"],["Transform","","core/Transform.html","()","<p>Transform is an object that is part of every RenderContext, Align and its\nderivatives Origin and MountPoint.\nIt is responsible for updating its own notion of position in space and\nincorporating its parent information.</p>"],["Transform.prototype.getGlobalMatrix","Transform","core/Transform.html#getGlobalMatrix","()","<p>Return the transform matrix that represents this Transform's values\n  being applied to it's parent's global transform.</p>"],["Transform.prototype.getLocalVectors","Transform","core/Transform.html#getLocalVectors","()","<p>Return the vectorized information for this Transform's local\n  transform.</p>"],["Transform.prototype._invalidateFromParent","Transform","core/Transform.html#_invalidateFromParent","(parentReport)","<p>Updates the local invalidation scheme based on parent information</p>"],["Transform.prototype._update","Transform","core/Transform.html#_update","(parentReport, parentMatrix)","<p>Update the global matrix based on local and parent invalidations.</p>"],["Transform.prototype.translate","Transform","core/Transform.html#translate","(x, y, z)","<p>Add extra translation to the current values.  Invalidates\n  translation as needed.</p>"],["Transform.prototype.rotate","Transform","core/Transform.html#rotate","(x, y, z)","<p>Add extra rotation to the current values.  Invalidates\n  rotation as needed.</p>"],["Transform.prototype.scale","Transform","core/Transform.html#scale","(x, y, z)","<p>Add extra scale to the current values.  Invalidates\n  scale as needed.</p>"],["Transform.prototype.setTranslation","Transform","core/Transform.html#setTranslation","(x, y, z)","<p>Absolute set of the Transform's translation.  Invalidates\n  translation as needed.</p>"],["Transform.prototype.getTranslation","Transform","core/Transform.html#getTranslation","()","<p>Return the current translation.</p>"],["Transform.prototype.setRotate","Transform","core/Transform.html#setRotate","(x, y, z)","<p>Absolute set of the Transform's rotation.  Invalidates\n  rotation as needed.</p>"],["Transform.prototype.getRotation","Transform","core/Transform.html#getRotation","()","<p>Return the current rotation.</p>"],["Transform.prototype.setScale","Transform","core/Transform.html#setScale","(x, y, z)","<p>Absolute set of the Transform's scale.  Invalidates\n  scale as needed.</p>"],["Transform.prototype.getScale","Transform","core/Transform.html#getScale","()","<p>Return the current scale.</p>"],["HTMLElement","","dom-renderables/HTMLElement.html","(RenderNode)","<p>The Element class is responsible for providing the API for how\n  a RenderNode will interact with the DOM API's.  The element is\n  responsible for adding a set of commands to the renderer.</p>"],["HTMLElement.prototype.property","HTMLElement","dom-renderables/HTMLElement.html#property","(key, value)","<p>Set the value of a CSS property</p>"],["HTMLElement.prototype.trueSize","HTMLElement","dom-renderables/HTMLElement.html#trueSize","(trueWidth, trueHeight)","<p>The method by which a user tells the element to ignore the context\n  size and get size from the content instead.</p>"],["HTMLElement.prototype.attribute","HTMLElement","dom-renderables/HTMLElement.html#attribute","(key, value)","<p>Set an attribute on the DOM element</p>"],["HTMLElement.prototype.addClass","HTMLElement","dom-renderables/HTMLElement.html#addClass","(value)","<p>Define a CSS class to be added to the DOM element</p>"],["HTMLElement.prototype.removeClass","HTMLElement","dom-renderables/HTMLElement.html#removeClass","(value)","<p>Define a CSS class to be removed from the DOM element</p>"],["HTMLElement.prototype.id","HTMLElement","dom-renderables/HTMLElement.html#id","(value)","<p>Define the id of the DOM element</p>"],["HTMLElement.prototype.content","HTMLElement","dom-renderables/HTMLElement.html#content","(value)","<p>Define the content of the DOM element</p>"],["HTMLElement.prototype.get","HTMLElement","dom-renderables/HTMLElement.html#get","(key)","<p>Get a component of the RenderNode that the HTMLElement component is\n  attached to by name.</p>"],["HTMLElement.prototype.eventListener","HTMLElement","dom-renderables/HTMLElement.html#eventListener","(ev)","<p>Adds a command to add an eventListener to the current DOM HTMLElement.\n  primarily used internally.</p>"],["HTMLElement.prototype.isRenderable","HTMLElement","dom-renderables/HTMLElement.html#isRenderable","()","<p>isRenderable returns whether or not this HTMLElement currently has any Information to render</p>"],["HTMLElement.prototype.clear","HTMLElement","dom-renderables/HTMLElement.html#clear","()","<p>Clears the state on the HTMLElement so that it can be rendered next frame.</p>"],["ElementAllocator","","dom-renderers/ElementAllocator.html","(container)","<p>Internal helper object to Container that handles the process of\n  creating and allocating DOM elements within a managed div.\n  Private.</p>"],["ElementAllocator.prototype.allocate","ElementAllocator","dom-renderers/ElementAllocator.html#allocate","(type)","<p>Allocate an element of specified type from the pool.</p>"],["ElementAllocator.prototype.deallocate","ElementAllocator","dom-renderers/ElementAllocator.html#deallocate","(element)","<p>De-allocate an element of specified type to the pool.</p>"],["ElementAllocator.prototype.getNodeCount","ElementAllocator","dom-renderers/ElementAllocator.html#getNodeCount","()","<p>Get count of total allocated nodes in the document.</p>"],["VirtualElement.prototype.stringifyMatrix","VirtualElement","dom-renderers/VirtualElement.html#stringifyMatrix","(A)","<p>A helper function for serializing a transform its corresponding\ncss string representation.</p>"],["index.prototype.start","index","engine/index.html#start","()","<p>Starts the Engine.</p>"],["index.prototype.stop","index","engine/index.html#stop","()","<p>Stops the Engine.</p>"],["index.prototype.isRunning","index","engine/index.html#isRunning","()","<p>Determines whether the Engine is currently running or not.</p>"],["index.prototype.step","index","engine/index.html#step","(time)","<p>Updates all registered objects.</p>"],["index.prototype.loop","index","engine/index.html#loop","(time)","<p>Method being called by <code>requestAnimationFrame</code> on every paint. Indirectly\nrecursive by scheduling a future invocation of itself on the next paint.</p>"],["index.prototype.update","index","engine/index.html#update","(updateable)","<p>Registeres an updateable object which <code>update</code> method should be invoked on\nevery paint, starting on the next paint (assuming the Engine is running).</p>"],["index.prototype.noLongerUpdate","index","engine/index.html#noLongerUpdate","(updateable)","<p>Deregisters an updateable object previously registered using <code>update</code> to be\nno longer updated.</p>"],["Mat33","","math/Mat33.html","(values)","<p>A 3x3 numerical matrix, represented as an array.</p>"],["Mat33.prototype.get","Mat33","math/Mat33.html#get","()","<p>Return the values in the Mat33 as an array.</p>"],["Mat33.prototype.set","Mat33","math/Mat33.html#set","(values)","<p>Set the values of the current Mat33.</p>"],["Mat33.prototype.copy","Mat33","math/Mat33.html#copy","(matrix)","<p>Copy the values of the input Mat33.</p>"],["Mat33.prototype.vectorMultiply","Mat33","math/Mat33.html#vectorMultiply","(v, output)","<p>Take this Mat33 as A, input vector V as a column vector, and return Mat33 product (A)(V).</p>"],["Mat33.prototype.multiply","Mat33","math/Mat33.html#multiply","(matrix)","<p>Multiply the provided Mat33 with the current Mat33.  Result is (this) * (matrix).</p>"],["Mat33.prototype.transpose","Mat33","math/Mat33.html#transpose","()","<p>Transposes the Mat33.</p>"],["Mat33.prototype.getDeterminant","Mat33","math/Mat33.html#getDeterminant","()","<p>The determinant of the Mat33.</p>"],["Mat33.prototype.inverse","Mat33","math/Mat33.html#inverse","()","<p>The inverse of the Mat33.</p>"],["Mat33.prototype.clone","Mat33","math/Mat33.html#clone","(m)","<p>Clones the input Mat33.</p>"],["Mat33.prototype.inverse","Mat33","math/Mat33.html#inverse","(matrix, output)","<p>The inverse of the Mat33.</p>"],["Mat33.prototype.transpose","Mat33","math/Mat33.html#transpose","(matrix, output)","<p>Transposes the Mat33.</p>"],["Mat33.prototype.add","Mat33","math/Mat33.html#add","(matrix1, matrix2, output)","<p>Add the provided Mat33's.</p>"],["Mat33.prototype.subtract","Mat33","math/Mat33.html#subtract","(matrix1, matrix2, output)","<p>Subtract the provided Mat33's.</p>"],["Mat33.prototype.multiply","Mat33","math/Mat33.html#multiply","(matrix1, matrix2, output)","<p>Multiply the provided Mat33 M2 with this Mat33.  Result is (this) * (M2).</p>"],["Quaternion","","math/Quaternion.html","(w, x, y, z)","<p>A vector-like object used to represent rotations. If theta is the angle of\nrotation, and (x', y', z') is a normalized vector representing the axis of\nrotation, then w = cos(theta/2), x = -sin(theta/2)<em>x', y = -sin(theta/2)</em>y',\nand z = -sin(theta/2)*z'.</p>"],["Quaternion.prototype.add","Quaternion","math/Quaternion.html#add","(q)","<p>Add the components of input q to the current Quaternion.</p>"],["Quaternion.prototype.subtract","Quaternion","math/Quaternion.html#subtract","(q)","<p>Subtract the components of input q from the current Quaternion.</p>"],["Quaternion.prototype.scalarMultiply","Quaternion","math/Quaternion.html#scalarMultiply","(s)","<p>Scale the current Quaternion by input scalar s.</p>"],["Quaternion.prototype.multiply","Quaternion","math/Quaternion.html#multiply","(q)","<p>Multiply the current Quaternion by input Quaternion q.\nLeft-handed coordinate system multiplication.</p>"],["Quaternion.prototype.leftMultiply","Quaternion","math/Quaternion.html#leftMultiply","(q)","<p>Multiply the current Quaternion by input Quaternion q on the left, i.e. q * this.\nLeft-handed coordinate system multiplication.</p>"],["Quaternion.prototype.rotateVector","Quaternion","math/Quaternion.html#rotateVector","(v, output)","<p>Apply the current Quaternion to input Vec3 v, according to\nv' = ~q <em> v </em> q.</p>"],["Quaternion.prototype.invert","Quaternion","math/Quaternion.html#invert","()","<p>Invert the current Quaternion.</p>"],["Quaternion.prototype.conjugate","Quaternion","math/Quaternion.html#conjugate","()","<p>Conjugate the current Quaternionl</p>"],["Quaternion.prototype.length","Quaternion","math/Quaternion.html#length","()","<p>Compute the length (norm) of the current Quaternion.</p>"],["Quaternion.prototype.normalize","Quaternion","math/Quaternion.html#normalize","()","<p>Alter the current Quaternion to be of unit length;</p>"],["Quaternion.prototype.makeFromAngleAndAxis","Quaternion","math/Quaternion.html#makeFromAngleAndAxis","(angle, v)","<p>Alter the current Quaternion to reflect a rotation of input angle about\ninput axis v.</p>"],["Quaternion.prototype.set","Quaternion","math/Quaternion.html#set","(w, x, y, z)","<p>Set the w, x, y, z components of the current Quaternion.</p>"],["Quaternion.prototype.copy","Quaternion","math/Quaternion.html#copy","(q)","<p>Copy input Quaternion q onto the current Quaternion.</p>"],["Quaternion.prototype.clear","Quaternion","math/Quaternion.html#clear","()","<p>Reset the current Quaternion.</p>"],["Quaternion.prototype.dot","Quaternion","math/Quaternion.html#dot","(q)","<p>The 4d dot product. Can be used to determine the cosine of the angle between\nthe two rotations, assuming both Quaternions are of unit length.</p>"],["Quaternion.prototype.toMatrix","Quaternion","math/Quaternion.html#toMatrix","()","<p>Get the Mat33 matrix corresponding to the current Quaternion.</p>"],["Quaternion.prototype.slerp","Quaternion","math/Quaternion.html#slerp","(q, t, output)","<p>Spherical linear interpolation.</p>"],["Quaternion.prototype.clamp","Quaternion","math/Quaternion.html#clamp","(value, lower, upper)","<p>Helper function to clamp a value to a given range.</p>"],["Quaternion.prototype.toEulerXYZ","Quaternion","math/Quaternion.html#toEulerXYZ","(output)","<p>The rotation angles about the x, y, and z axes corresponding to the\ncurrent Quaternion, when applied in the XYZ order.</p>"],["Quaternion.prototype.fromEulerXYZ","Quaternion","math/Quaternion.html#fromEulerXYZ","(x, y, z, output)","<p>The Quaternion corresponding to the Euler angles x, y, and z,\napplied in the XYZ order.</p>"],["Quaternion.prototype.multiply","Quaternion","math/Quaternion.html#multiply","(q1, q2, output)","<p>Multiply the input Quaternions.\nLeft-handed coordinate system multiplication.</p>"],["Quaternion.prototype.conjugate","Quaternion","math/Quaternion.html#conjugate","(q, output)","<p>The conjugate of the input Quaternion.</p>"],["Quaternion.prototype.normalize","Quaternion","math/Quaternion.html#normalize","(q, output)",""],["Quaternion.prototype.clone","Quaternion","math/Quaternion.html#clone","(q)","<p>Clone the input Quaternion.</p>"],["Quaternion.add","Quaternion","math/Quaternion.html#add","(q1, q2, output)","<p>Add the inputs Quaternions.</p>"],["Quaternion.subtract","Quaternion","math/Quaternion.html#subtract","(q1, q2, output)","<p>Subtract the inputs Quaternions.</p>"],["Quaternion.scale","Quaternion","math/Quaternion.html#scale","(q, s, output)","<p>Scale the input Quaternion by a scalar.</p>"],["Quaternion.prototype.dotProduct","Quaternion","math/Quaternion.html#dotProduct","(q1, q2)","<p>The dot product of the two input Quaternions.</p>"],["Vec2","","math/Vec2.html","(x, y)","<p>A two-dimensional vector.</p>"],["Vec2.prototype.set","Vec2","math/Vec2.html#set","(x, y)","<p>Set the components of the current Vec2.</p>"],["Vec2.prototype.add","Vec2","math/Vec2.html#add","(v)","<p>Add the input v to the current Vec2.</p>"],["Vec2.prototype.subtract","Vec2","math/Vec2.html#subtract","(v)","<p>Subtract the input v from the current Vec2.</p>"],["Vec2.prototype.scale","Vec2","math/Vec2.html#scale","(s)","<p>Scale the current Vec2 by a scalar or Vec2.</p>"],["Vec2.prototype.rotate","Vec2","math/Vec2.html#rotate","(theta)","<p>Rotate the Vec2 counter-clockwise by theta about the z-axis.</p>"],["Vec2.prototype.dot","Vec2","math/Vec2.html#dot","(v)","<p>The dot product of of the current Vec2 with the input Vec2.</p>"],["Vec2.prototype.cross","Vec2","math/Vec2.html#cross","(v)","<p>The cross product of of the current Vec2 with the input Vec2.</p>"],["Vec2.prototype.invert","Vec2","math/Vec2.html#invert","()","<p>Preserve the magnitude but invert the orientation of the current Vec2.</p>"],["Vec2.prototype.map","Vec2","math/Vec2.html#map","(fn)","<p>Apply a function component-wise to the current Vec2.</p>"],["Vec2.prototype.length","Vec2","math/Vec2.html#length","()","<p>The magnitude of the current Vec2.</p>"],["Vec2.prototype.copy","Vec2","math/Vec2.html#copy","(v)","<p>Copy the input onto the current Vec2.</p>"],["Vec2.prototype.clear","Vec2","math/Vec2.html#clear","()","<p>Reset the current Vec2.</p>"],["Vec2.prototype.isZero","Vec2","math/Vec2.html#isZero","()","<p>Check whether the magnitude of the current Vec2 is exactly 0.</p>"],["Vec2.prototype.toArray","Vec2","math/Vec2.html#toArray","()","<p>The array form of the current Vec2.</p>"],["Vec2.prototype.normalize","Vec2","math/Vec2.html#normalize","(v, output)","<p>Normalize the input Vec2.</p>"],["Vec2.prototype.clone","Vec2","math/Vec2.html#clone","(v)","<p>Clone the input Vec2.</p>"],["Vec2.prototype.add","Vec2","math/Vec2.html#add","(v1, v2, output)","<p>Add the input Vec2's.</p>"],["Vec2.prototype.subtract","Vec2","math/Vec2.html#subtract","(v1, v2, output)","<p>Subtract the second Vec2 from the first.</p>"],["Vec2.prototype.scale","Vec2","math/Vec2.html#scale","(v, s, output)","<p>Scale the input Vec2.</p>"],["Vec2.prototype.dot","Vec2","math/Vec2.html#dot","(v1, v2)","<p>The dot product of the input Vec2's.</p>"],["Vec2.prototype.cross","Vec2","math/Vec2.html#cross","(v, v)","<p>The cross product of the input Vec2's.</p>"],["Vec3","","math/Vec3.html","(x, y, z)","<p>A three-dimensional vector.</p>"],["Vec3.prototype.set","Vec3","math/Vec3.html#set","(x, y, z)","<p>Set the components of the current Vec3.</p>"],["Vec3.prototype.add","Vec3","math/Vec3.html#add","(v)","<p>Add the input v to the current Vec3.</p>"],["Vec3.prototype.subtract","Vec3","math/Vec3.html#subtract","(v)","<p>Subtract the input v from the current Vec3.</p>"],["Vec3.prototype.rotateX","Vec3","math/Vec3.html#rotateX","(theta)","<p>Rotate the current Vec3 by theta clockwise about the x axis.</p>"],["Vec3.prototype.rotateY","Vec3","math/Vec3.html#rotateY","(theta)","<p>Rotate the current Vec3 by theta clockwise about the y axis.</p>"],["Vec3.prototype.rotateZ","Vec3","math/Vec3.html#rotateZ","(theta)","<p>Rotate the current Vec3 by theta clockwise about the z axis.</p>"],["Vec3.prototype.dot","Vec3","math/Vec3.html#dot","(v)","<p>The dot product of the current Vec3 with input Vec3 v.</p>"],["Vec3.prototype.cross","Vec3","math/Vec3.html#cross","(v)","<p>The dot product of the current Vec3 with input Vec3 v.\nStores the result in the current Vec3.</p>"],["Vec3.prototype.scale","Vec3","math/Vec3.html#scale","(s)","<p>Scale the current Vec3 by a scalar.</p>"],["Vec3.prototype.invert","Vec3","math/Vec3.html#invert","()","<p>Preserve the magnitude but invert the orientation of the current Vec3.</p>"],["Vec3.prototype.map","Vec3","math/Vec3.html#map","(fn)","<p>Apply a function component-wise to the current Vec3.</p>"],["Vec3.prototype.length","Vec3","math/Vec3.html#length","()","<p>The magnitude of the current Vec3.</p>"],["Vec3.prototype.length","Vec3","math/Vec3.html#length","()","<p>The magnitude squared of the current Vec3.</p>"],["Vec3.prototype.copy","Vec3","math/Vec3.html#copy","(v)","<p>Copy the input onto the current Vec3.</p>"],["Vec3.prototype.clear","Vec3","math/Vec3.html#clear","()","<p>Reset the current Vec3.</p>"],["Vec3.prototype.isZero","Vec3","math/Vec3.html#isZero","()","<p>Check whether the magnitude of the current Vec3 is exactly 0.</p>"],["Vec3.prototype.toArray","Vec3","math/Vec3.html#toArray","()","<p>The array form of the current Vec3.</p>"],["Vec3.prototype.normalize","Vec3","math/Vec3.html#normalize","()","<p>Preserve the orientation but change the length of the current Vec3 to 1.</p>"],["Vec3.prototype.applyRotation","Vec3","math/Vec3.html#applyRotation","(q)","<p>Apply the rotation corresponding to the input (unit) Quaternion\nto the current Vec3.</p>"],["Vec3.prototype.applyMatrix","Vec3","math/Vec3.html#applyMatrix","(matrix)","<p>Apply the input Mat33 the the current Vec3.</p>"],["Vec3.prototype.normalize","Vec3","math/Vec3.html#normalize","(v, output)","<p>Normalize the input Vec3.</p>"],["Vec3.prototype.applyRotation","Vec3","math/Vec3.html#applyRotation","(v, q, output)","<p>Apply a rotation to the input Vec3.</p>"],["Vec3.prototype.clone","Vec3","math/Vec3.html#clone","(v)","<p>Clone the input Vec3.</p>"],["Vec3.prototype.add","Vec3","math/Vec3.html#add","(v1, v2, output)","<p>Add the input Vec3's.</p>"],["Vec3.prototype.subtract","Vec3","math/Vec3.html#subtract","(v1, v2, output)","<p>Subtract the second Vec3 from the first.</p>"],["Vec3.prototype.scale","Vec3","math/Vec3.html#scale","(v, s, output)","<p>Scale the input Vec3.</p>"],["Vec3.prototype.dotProduct","Vec3","math/Vec3.html#dotProduct","(v1, v2)","<p>The dot product of the input Vec3's.</p>"],["Vec3.prototype.crossProduct","Vec3","math/Vec3.html#crossProduct","(v1, v2, output)","<p>The (right-handed) cross product of the input Vec3's.\nv1 x v2.</p>"],["Vec3.prototype.project","Vec3","math/Vec3.html#project","(v1, v2, output)","<p>The projection of v1 onto v2.</p>"],["Geometry.prototype.tripleProduct","Geometry","physics/Geometry.html#tripleProduct","(v1, v2, v3)","<p>The so called triple product. Used to find a vector perpendicular to (v2 - v1) in the direction of v3.\n(v1 x v2) x v3.</p>"],["Geometry.prototype._hullSupport","Geometry","physics/Geometry.html#_hullSupport","(vertices, direction)","<p>Of a set of vertices, retrieves the vertex furthest in the given direction.</p>"],["Geometry.prototype.reset","Geometry","physics/Geometry.html#reset","(args)","<p>Used by ObjectManager to reset objects.</p>"],["Geometry.prototype.reset","Geometry","physics/Geometry.html#reset","(args)","<p>Used by ObjectManager to reset objects.</p>"],["Geometry.prototype.addVertex","Geometry","physics/Geometry.html#addVertex","(vertexObj)","<p>Add a vertex to the polyhedron.</p>"],["Geometry.prototype.removeVertex","Geometry","physics/Geometry.html#removeVertex","(index)","<p>Remove a vertex and push its location in the vertex array to the IDPool for later use.</p>"],["Geometry.prototype.addFeature","Geometry","physics/Geometry.html#addFeature","(distance, normal, vertexIndices)","<p>Add a feature (facet) to the polyhedron. Used internally in the reshaping process.</p>"],["Geometry.prototype.removeFeature","Geometry","physics/Geometry.html#removeFeature","(index)","<p>Remove a feature and push its location in the feature array to the IDPool for later use.</p>"],["Geometry.prototype.getLastVertex","Geometry","physics/Geometry.html#getLastVertex","()","<p>Retrieve the last vertex object added to the geometry.</p>"],["Geometry.prototype.getFeatureClosestToOrigin","Geometry","physics/Geometry.html#getFeatureClosestToOrigin","()","<p>Of the closest face to the origin, returns the normal vector pointed away from the origin.</p>"],["Geometry.prototype._validateEdge","Geometry","physics/Geometry.html#_validateEdge","(vertices, frontier, start, end)","<p>Adds edge if not already on the frontier, removes if the edge or its reverse are on the frontier.\nUsed when reshaping DynamicGeometry's.</p>"],["Geometry.prototype.reshape","Geometry","physics/Geometry.html#reshape","(referencePoint)","<p>Based on the last (exterior) point added to the polyhedron, removes features as necessary and redetermines\nits (convex) shape to include the new point by adding triangle features. Uses referencePoint, a point on the shape's\ninterior, to ensure feature normals point outward, else takes referencePoint to be the origin.</p>"],["Geometry.prototype.simplexContainsOrigin","Geometry","physics/Geometry.html#simplexContainsOrigin","(direction, callback)","<p>Checks if the Simplex instance contains the origin, returns true or false.\nIf false, removes a point and, as a side effect, changes input direction to be both\northogonal to the current working simplex and point toward the origin.\nCalls callback on the removed point.</p>"],["Geometry.prototype._computeConvexHull","Geometry","physics/Geometry.html#_computeConvexHull","(vertices, maxIterations)","<p>Performs the actual computation of the convex hull.</p>"],["Geometry.prototype._subexpressions","Geometry","physics/Geometry.html#_subexpressions","(w0, w1, w2, f, g)","<p>Helper function used in _computePolyhedralProperties.\nSets f0 - f2 and g0 - g2 depending on w0 - w2.</p>"],["Geometry.prototype._computePolyhedralProperties","Geometry","physics/Geometry.html#_computePolyhedralProperties","(vertices, indices)","<p>Determines various properties of the volume.</p>"],["PhysicsEngine","","physics/PhysicsEngine.html","(options)","<p>Singleton PhysicsEngine object.\nManages bodies, forces, constraints.</p>"],["PhysicsEngine.prototype.setOrigin","PhysicsEngine","physics/PhysicsEngine.html#setOrigin","(x, y, z)","<p>Set the origin of the world.</p>"],["PhysicsEngine.prototype.setOrientation","PhysicsEngine","physics/PhysicsEngine.html#setOrientation","(w, x, y, z)","<p>Set the orientation of the world.</p>"],["PhysicsEngine.prototype._addElement","PhysicsEngine","physics/PhysicsEngine.html#_addElement","(element, key)","<p>Private helper method to store an element in a library array.</p>"],["PhysicsEngine.prototype._removeElement","PhysicsEngine","physics/PhysicsEngine.html#_removeElement","(element, key)","<p>Private helper method to remove an element from a library array.</p>"],["PhysicsEngine.prototype.add","PhysicsEngine","physics/PhysicsEngine.html#add","()","<p>Add a group of bodies, force, or constraints to the engine.</p>"],["PhysicsEngine.prototype.remove","PhysicsEngine","physics/PhysicsEngine.html#remove","()","<p>Remove a group of bodies, force, or constraints from the engine.</p>"],["PhysicsEngine.prototype.addBody","PhysicsEngine","physics/PhysicsEngine.html#addBody","(body)","<p>Begin tracking a body.</p>"],["PhysicsEngine.prototype.addForce","PhysicsEngine","physics/PhysicsEngine.html#addForce","(force)","<p>Begin tracking a force.</p>"],["PhysicsEngine.prototype.addConstraint","PhysicsEngine","physics/PhysicsEngine.html#addConstraint","(constraint)","<p>Begin tracking a constraint.</p>"],["PhysicsEngine.prototype.removeBody","PhysicsEngine","physics/PhysicsEngine.html#removeBody","(body)","<p>Stop tracking a body.</p>"],["PhysicsEngine.prototype.removeForce","PhysicsEngine","physics/PhysicsEngine.html#removeForce","(force)","<p>Stop tracking a force.</p>"],["PhysicsEngine.prototype.removeConstraint","PhysicsEngine","physics/PhysicsEngine.html#removeConstraint","(constraint)","<p>Stop tracking a constraint.</p>"],["PhysicsEngine.prototype.update","PhysicsEngine","physics/PhysicsEngine.html#update","(time)","<p>Update the physics system to reflect the changes since the last frame. Steps forward in increments of\nPhysicsEngine.step.</p>"],["PhysicsEngine.prototype.getTransform","PhysicsEngine","physics/PhysicsEngine.html#getTransform","()","<p>Get the transform equivalent to the Particle's position and orientation.</p>"],["PhysicsEngine.prototype._integrateVelocity","PhysicsEngine","physics/PhysicsEngine.html#_integrateVelocity","(body, dt)","<p>Update the Particle momenta based off of current incident force and torque.</p>"],["PhysicsEngine.prototype._integratePose","PhysicsEngine","physics/PhysicsEngine.html#_integratePose","(body, dt)","<p>Update the Particle position and orientation based off current translational and angular velocities.</p>"],["Box","Particle","physics/bodies/Box.html","(options)",""],["ConvexBodyFactory","","physics/bodies/ConvexBodyFactory.html","(hull)","<p>Returns a constructor for a physical body reflecting the shape defined by input ConvexHull or Vec3 array.</p>"],["ConvexBodyFactory.prototype.setSize","ConvexBodyFactory","physics/bodies/ConvexBodyFactory.html#setSize","(x, y, z)","<p>Set the size and recalculate</p>"],["ConvexBodyFactory.prototype.updateLocalInertia","ConvexBodyFactory","physics/bodies/ConvexBodyFactory.html#updateLocalInertia","()","<p>Update the local inertia and inverse inertia to reflect the current size.</p>"],["ConvexBodyFactory.prototype.support","ConvexBodyFactory","physics/bodies/ConvexBodyFactory.html#support","()","<p>Retrieve the vertex furthest in a direction. Used internally for collision detection.</p>"],["ConvexBodyFactory.prototype.updateShape","ConvexBodyFactory","physics/bodies/ConvexBodyFactory.html#updateShape","()","<p>Update vertices to reflect current orientation.</p>"],["ConvexBodyFactory.prototype._computeInertiaProperties","ConvexBodyFactory","physics/bodies/ConvexBodyFactory.html#_computeInertiaProperties","(T)","<p>Determines mass and inertia tensor based off the density, size, and facet information of the polyhedron.</p>"],["Particle","Particle","physics/bodies/Particle.html","(options)","<p>Fundamental physical body. Maintains translational and angular momentum, position and orientation, and other properties\nsuch as size and coefficients of restitution and friction used in collision response.</p>"],["Particle.prototype.getRestrictions","Particle","physics/bodies/Particle.html#getRestrictions","()","<p>Getter for the restriction bitmask. Converts the restrictions to their string representation.</p>"],["Particle.prototype.setRestrictions","Particle","physics/bodies/Particle.html#setRestrictions","(transRestrictions, rotRestrictions)","<p>Setter for the particle restriction bitmask.</p>"],["Particle.prototype.getMass","Particle","physics/bodies/Particle.html#getMass","()","<p>Getter for mass</p>"],["Particle.prototype.setMass","Particle","physics/bodies/Particle.html#setMass","(mass)","<p>Set the mass of the Particle.  Can be used to change the mass several times</p>"],["Particle.prototype.getInverseMass","Particle","physics/bodies/Particle.html#getInverseMass","()","<p>Getter for inverse mass</p>"],["Particle.prototype.updateLocalInertia","Particle","physics/bodies/Particle.html#updateLocalInertia","(Mat33)","<p>Resets the inertia tensor and its inverse to reflect the current shape.</p>"],["Particle.prototype.updateInertia","Particle","physics/bodies/Particle.html#updateInertia","()","<p>Updates the world inverse inertia tensor.</p>"],["Particle.prototype.getPosition","Particle","physics/bodies/Particle.html#getPosition","()","<p>Getter for position</p>"],["Particle.prototype.setPosition","Particle","physics/bodies/Particle.html#setPosition","(x, y, z)","<p>Setter for position</p>"],["Particle.prototype.getVelocity","Particle","physics/bodies/Particle.html#getVelocity","()","<p>Getter for velocity</p>"],["Particle.prototype.setvelocity","Particle","physics/bodies/Particle.html#setvelocity","(x, y, z)","<p>Setter for velocity</p>"],["Particle.prototype.getMomentum","Particle","physics/bodies/Particle.html#getMomentum","()","<p>Getter for momenutm</p>"],["Particle.prototype.setMomentum","Particle","physics/bodies/Particle.html#setMomentum","(x, y, z)","<p>Setter for momentum</p>"],["Particle.prototype.getOrientation","Particle","physics/bodies/Particle.html#getOrientation","()","<p>Getter for orientation</p>"],["Particle.prototype.setOrientation","Particle","physics/bodies/Particle.html#setOrientation","(w, x, y, z)","<p>Setter for orientation</p>"],["Particle.prototype.getAngularVelocity","Particle","physics/bodies/Particle.html#getAngularVelocity","()","<p>Getter for angular velocity</p>"],["Particle.prototype.setAngularVelocity","Particle","physics/bodies/Particle.html#setAngularVelocity","(x, y, z)","<p>Setter for angular velocity</p>"],["Particle.prototype.getAngularMomentum","Particle","physics/bodies/Particle.html#getAngularMomentum","()","<p>Getter for angular momentum</p>"],["Particle.prototype.setAngularMomentum","Particle","physics/bodies/Particle.html#setAngularMomentum","(x, y, z)","<p>Setter for angular momentum</p>"],["Particle.prototype.getForce","Particle","physics/bodies/Particle.html#getForce","()","<p>Getter for the force on the Particle</p>"],["Particle.prototype.setForce","Particle","physics/bodies/Particle.html#setForce","(v)","<p>Setter for the force on the Particle</p>"],["Particle.prototype.getTorque","Particle","physics/bodies/Particle.html#getTorque","()","<p>Getter for torque.</p>"],["Particle.prototype.setTorque","Particle","physics/bodies/Particle.html#setTorque","(v)","<p>Setter for torque.</p>"],["Particle.prototype.applyForce","Particle","physics/bodies/Particle.html#applyForce","(force, location)","<p>Extends Particle.applyForce with an optional argument\nto apply the force at an off-centered location, resulting in a torque.</p>"],["Particle.prototype.applyTorque","Particle","physics/bodies/Particle.html#applyTorque","(torque)","<p>Applied a torque force to a Particle, inducing a rotation.</p>"],["Particle.prototype.applyImpulse","Particle","physics/bodies/Particle.html#applyImpulse","(impulse)","<p>Applies an impulse to momentum and updates velocity.</p>"],["Particle.prototype.applyAngularImpulse","Particle","physics/bodies/Particle.html#applyAngularImpulse","(angularImpulse)","<p>Applies an angular impulse to angular momentum and updates angular velocity.</p>"],["Particle.prototype.support","Particle","physics/bodies/Particle.html#support","(direction)","<p>Used in collision detection. The support function should take in a Vec3 direction\nand return the point on the body's shape furthest in that direction.</p>"],["Particle.prototype.updateShape","Particle","physics/bodies/Particle.html#updateShape","()","<p>Update the body's shape to reflect current orientation. Called in _integratePose.\nNoop for point particles.</p>"],["Sphere","Particle","physics/bodies/Sphere.html","(options)","<p>Spherical Rigid body</p>"],["Sphere.prototype.getRadius","Sphere","physics/bodies/Sphere.html#getRadius","()","<p>Getter for radius.</p>"],["Sphere.prototype.setRadius","Sphere","physics/bodies/Sphere.html#setRadius","(radius)","<p>Setter for radius.</p>"],["Sphere.prototype.updateInertia","Sphere","physics/bodies/Sphere.html#updateInertia","()","<p>Infers the inertia tensor.</p>"],["Sphere.prototype.support","Sphere","physics/bodies/Sphere.html#support","(direction, undefined)","<p>Returns the point on the sphere furthest in a given direction.</p>"],["Wall.DOWN","Wall","physics/bodies/Wall.html#DOWN","",""],["Wall","Particle","physics/bodies/Wall.html","(options)","<p>An axis-aligned boundary. Will not respond to forces or impulses.</p>"],["Angle","Constraint","physics/constraints/Angle.html","(a, b, options)","<p>A constraint that keeps a physics body a given direction away from a given\n anchor, or another attached body.</p>"],["Angle.prototype.init","Angle","physics/constraints/Angle.html#init","(options)","<p>Initialize the Angle. Sets defaults if a property was not already set.</p>"],["Angle.prototype.update","Angle","physics/constraints/Angle.html#update","(time, dt)","<p>Warmstart the constraint and prepare calculations used in .resolve.</p>"],["Angle.prototype.resolve","Angle","physics/constraints/Angle.html#resolve","(time, dt)","<p>Adds an angular impulse to a physics body's angular velocity.</p>"],["Collision.prototype.clamp","Collision","physics/constraints/Collision.html#clamp","(value, lower, upper)","<p>Helper function to clamp a value to a given range.</p>"],["Collision.prototype.reset","Collision","physics/constraints/Collision.html#reset","(args)","<p>Used by ObjectManager to reset the object with different data.</p>"],["Collision","Constraint","physics/constraints/Collision.html","(options)","<p>Ridid body Elastic Collision</p>"],["Collision.prototype.init","Collision","physics/constraints/Collision.html#init","(options)","<p>Initialize the Collision tracker. Sets defaults if a property was not already set.</p>"],["Collision.prototype.update","Collision","physics/constraints/Collision.html#update","(time, dt)","<p>Collison detection. Updates the existing contact manifolds, runs the broadphase, and performs narrowphase\ncollision detection. Warm starts the contacts based on the results of the previous physics frame\nand prepares necesssary calculations for the resolution.</p>"],["Collision.prototype.resolve","Collision","physics/constraints/Collision.html#resolve","(time, dt)","<p>Apply impulses to resolve all Contact constraints.</p>"],["Collision.prototype.addTarget","Collision","physics/constraints/Collision.html#addTarget","(undefined)","<p>Add a target or targets to the collision system.</p>"],["Collision.prototype.addTarget","Collision","physics/constraints/Collision.html#addTarget","(undefined)","<p>Remove a target or targets from the collision system.</p>"],["Collision.prototype.applyNarrowPhase","Collision","physics/constraints/Collision.html#applyNarrowPhase","(targets)","<p>Narrowphase collision detection,\nregisters the Contact constraints for colliding bodies.</p>\n<p>Will detect the type of bodies in the collision.</p>"],["Collision.prototype.sphereIntersectSphere","Collision","physics/constraints/Collision.html#sphereIntersectSphere","(context, sphere1, sphere2)","<p>Detects sphere-sphere collisions and registers the Contact.</p>"],["Collision.prototype.boxIntersectSphere","Collision","physics/constraints/Collision.html#boxIntersectSphere","(context, box, sphere)","<p>Detects box-sphere collisions and registers the Contact.</p>"],["Collision.prototype.convexIntersectConvex","Collision","physics/constraints/Collision.html#convexIntersectConvex","(context, convex1, convex2)","<p>Detects convex-convex collisions and registers the Contact. Uses GJK to determine overlap and then\nEPA to determine the actual collision data.</p>"],["Collision.prototype.convexIntersectWall","Collision","physics/constraints/Collision.html#convexIntersectWall","(context, convex, wall)","<p>Detects convex-wall collisions and registers the Contact.</p>"],["Constraint","","physics/constraints/Constraint.html","()","<p>Base Constraint class to be used in the Physics\nSubclass this class to implement a constraint</p>"],["Constraint.prototype.setOptions","Constraint","physics/constraints/Constraint.html#setOptions","(Options)","<p>Decorates the Constraint with the options object.</p>"],["Constraint.prototype.init","Constraint","physics/constraints/Constraint.html#init","(options)","<p>Method invoked upon instantiation and the setting of options.</p>"],["Constraint.prototype.update","Constraint","physics/constraints/Constraint.html#update","(time, dt)","<p>Detect violations of the constraint. Warm start the constraint, if possible.</p>"],["Constraint.prototype.resolve","Constraint","physics/constraints/Constraint.html#resolve","(time, dt)","<p>Apply impulses to resolve the constraint.</p>"],["Curve","Constraint","physics/constraints/Curve.html","()","<p>A constraint that keeps a physics body on a given implicit curve.</p>"],["Curve.prototype.init","Curve","physics/constraints/Curve.html#init","(options)","<p>Initialize the Curve. Sets defaults if a property was not already set.</p>"],["Curve.prototype.update","Curve","physics/constraints/Curve.html#update","(time, dt)","<p>Warmstart the constraint and prepare calculations used in the .resolve step.</p>"],["Curve.prototype.resolve","Curve","physics/constraints/Curve.html#resolve","(time, dt)","<p>Adds a curve impulse to a physics body.</p>"],["Direction","Constraint","physics/constraints/Direction.html","(a, b, options)","<p>A constraint that maintains the direction of one body from another.</p>"],["Direction.prototype.init","Direction","physics/constraints/Direction.html#init","(options)","<p>Initialize the Direction. Sets defaults if a property was not already set.</p>"],["Direction.prototype.update","Direction","physics/constraints/Direction.html#update","(time, dt)","<p>Warmstart the constraint and prepare calculations used in .resolve.</p>"],["Direction.prototype.resolve","Direction","physics/constraints/Direction.html#resolve","(time, dt)","<p>Adds an impulse to a physics body's velocity due to the constraint</p>"],["Distance","Constraint","physics/constraints/Distance.html","(a, b, options)","<p>A constraint that keeps two bodies within a certain distance.</p>"],["Distance.prototype.init","Distance","physics/constraints/Distance.html#init","(options)","<p>Initialize the Distance. Sets defaults if a property was not already set.</p>"],["Distance.prototype.update","Distance","physics/constraints/Distance.html#update","(time, dt)","<p>Detect violations of the constraint. Warm start the constraint, if possible.</p>"],["Distance.prototype.resolve","Distance","physics/constraints/Distance.html#resolve","(time, dt)","<p>Apply impulses to resolve the constraint.</p>"],["Hinge","Constraint","physics/constraints/Hinge.html","(options)","<p>A constraint that confines two bodies to the plane defined by the axis of the hinge.</p>"],["Hinge.prototype.init","Hinge","physics/constraints/Hinge.html#init","(options)","<p>Initialize the Hinge. Sets defaults if a property was not already set.</p>"],["Hinge.prototype.update","Hinge","physics/constraints/Hinge.html#update","(time, dt)","<p>Detect violations of the constraint. Warm start the constraint, if possible.</p>"],["Hinge.prototype.resolve","Hinge","physics/constraints/Hinge.html#resolve","(time, dt)","<p>Apply impulses to resolve the constraint.</p>"],["Point2Point","Constraint","physics/constraints/Point2Point.html","(a, b, options)","<p>A constraint that maintains positions and orientations with respect to a specific anchor point.</p>"],["Point2Point.prototype.init","Point2Point","physics/constraints/Point2Point.html#init","(options)","<p>Initialize the Point2Point. Sets defaults if a property was not already set.</p>"],["Point2Point.prototype.update","Point2Point","physics/constraints/Point2Point.html#update","(time, dt)","<p>Detect violations of the constraint. Warm start the constraint, if possible.</p>"],["Point2Point.prototype.resolve","Point2Point","physics/constraints/Point2Point.html#resolve","(time, dt)","<p>Apply impulses to resolve the constraint.</p>"],["AABB","","physics/collision/AABB.html","()","<p>Axis-aligned bounding box. Used in collision broadphases.</p>"],["AABB.prototype.update","AABB","physics/collision/AABB.html#update","()","<p>Update the bounds to reflect the current orientation and position of the parent Body.</p>"],["AABB.prototype.checkOverlap","AABB","physics/collision/AABB.html#checkOverlap","(aabb1, aabb2)","<p>Check for overlap between two AABB's.</p>"],["BruteForce.prototype.add","BruteForce","physics/collision/BruteForce.html#add","(body)","<p>Start tracking a Particle.</p>"],["BruteForce.prototype.update","BruteForce","physics/collision/BruteForce.html#update","()","<p>Return an array of possible collision pairs, culled by an AABB intersection test.</p>"],["BruteForce","","physics/collision/BruteForce.html","(targets, options)","<p>The most simple yet computationally intensive broad-phase. Immediately passes its targets to the narrow-phase,\nresulting in an O(n^2) process. Only feasible for a relatively small number of bodies.</p>"],["BruteForce.prototype.add","BruteForce","physics/collision/BruteForce.html#add","(body)","<p>Start tracking a Particle.</p>"],["BruteForce.prototype.update","BruteForce","physics/collision/BruteForce.html#update","()","<p>Immediately returns an array of possible collisions.</p>"],["ContactManifold.prototype.clamp","ContactManifold","physics/collision/ContactManifold.html#clamp","(value, lower, upper)","<p>Helper function to clamp a value to a given range.</p>"],["ContactManifold.prototype.addManifold","ContactManifold","physics/collision/ContactManifold.html#addManifold","(lowId, highID, bodyA, bodyB)","<p>Create a new contact manifold. Tracked by the collisionMatrix according to\nits low-high ordered ID pair.</p>"],["ContactManifold.prototype.removeManifold","ContactManifold","physics/collision/ContactManifold.html#removeManifold","(manifold, index)","<p>Remove a manifold and free it for later reuse.</p>"],["ContactManifold.prototype.update","ContactManifold","physics/collision/ContactManifold.html#update","(dt)","<p>Update each of the manifolds, removing those that no longer contain contact points.</p>"],["ContactManifold.prototype.prepContacts","ContactManifold","physics/collision/ContactManifold.html#prepContacts","(dt)","<p>Warm start all Contacts, and perform precalculations needed in the iterative solver.</p>"],["ContactManifold.prototype.resolveManifolds","ContactManifold","physics/collision/ContactManifold.html#resolveManifolds","(dt)","<p>Resolve all contact manifolds.</p>"],["ContactManifold.prototype.registerContact","ContactManifold","physics/collision/ContactManifold.html#registerContact","(bodyA, bodyB, collisionData)","<p>Create a new Contact, also creating a new Manifold if one does not already exist for that pair.</p>"],["ContactManifold.prototype.reset","ContactManifold","physics/collision/ContactManifold.html#reset","(args)","<p>Used by ObjectManager to reset the object with different data.</p>"],["ContactManifold.prototype.addContact","ContactManifold","physics/collision/ContactManifold.html#addContact","(bodyA, bodyB, collisionData)","<p>Create a new Contact point and add it to the Manifold.</p>"],["ContactManifold.prototype.removeContact","ContactManifold","physics/collision/ContactManifold.html#removeContact","(contact, index)","<p>Remove and free a Contact for later reuse.</p>"],["ContactManifold.prototype.contains","ContactManifold","physics/collision/ContactManifold.html#contains","(collisionData)","<p>Check if a Contact already exists for the collision data within a certain tolerance.\nIf found, remove the Contact.</p>"],["ContactManifold.prototype.update","ContactManifold","physics/collision/ContactManifold.html#update","(dt)","<p>Remove Contacts the local points of which have drifted above a certain tolerance.\nReturn true or false to indicate that the Manifold still contains at least one Contact.</p>"],["ContactManifold.prototype.resolveContacts","ContactManifold","physics/collision/ContactManifold.html#resolveContacts","(dt)","<p>Resolve all contacts.</p>"],["ContactManifold.prototype.reset","ContactManifold","physics/collision/ContactManifold.html#reset","(args)","<p>Used by ObjectManager to reset the object with different data.</p>"],["ContactManifold.prototype.init","ContactManifold","physics/collision/ContactManifold.html#init","()","<p>Initialization method called on instantiantion or reset of the Contact. Performs\nprecalculations that will not change over the life of the Contact.</p>"],["ContactManifold.prototype.update","ContactManifold","physics/collision/ContactManifold.html#update","(dt)","<p>Warm start the Contact, prepare for the iterative solver, and reset impulses.</p>"],["ContactManifold.prototype.resolve","ContactManifold","physics/collision/ContactManifold.html#resolve","(dt)","<p>Apply impulses to resolve the contact and simulate friction.</p>"],["ConvexCollisionDetection.prototype.reset","ConvexCollisionDetection","physics/collision/ConvexCollisionDetection.html#reset","(args)","<p>Used by ObjectManager to reset the object with different data.</p>"],["ConvexCollisionDetection.prototype.freeGJK_EPADynamicGeometry","ConvexCollisionDetection","physics/collision/ConvexCollisionDetection.html#freeGJK_EPADynamicGeometry","(geometry)","<p>Free the DynamicGeomtetry and associate vertices and features for later reuse.</p>"],["ConvexCollisionDetection.prototype.minkowskiSupport","ConvexCollisionDetection","physics/collision/ConvexCollisionDetection.html#minkowskiSupport","(body1, body2, direction)","<p>Find the point in Minkowski space furthest in a given direction for two convex Bodies.</p>"],["ConvexCollisionDetection.prototype.body2","ConvexCollisionDetection","physics/collision/ConvexCollisionDetection.html#GJK\nparam {Body} body1\nparam {Body} body2","()","<p>Gilbert-Johnson-Keerthi collision detection. Returns a DynamicGeometry simplex if the bodies are found\nto have collided or false for no collsion.</p>"],["ConvexCollisionDetection.prototype.EPA","ConvexCollisionDetection","physics/collision/ConvexCollisionDetection.html#EPA","(body1, body2, polytope)","<p>Expanding Polytope Algorithm--penetration depth, collision normal, and contact points.\nReturns a CollisonData object.</p>"],["SweepAndPrune","","physics/collision/SweepAndPrune.html","(targets, options)","<p>Persistant object maintaining sorted lists of AABB endpoints used in a sweep-and-prune broadphase.\nUsed to accelerate collision detection.\nhttp://en.wikipedia.org/wiki/Sweep_and_prune</p>"],["SweepAndPrune.prototype.add","SweepAndPrune","physics/collision/SweepAndPrune.html#add","(body)","<p>Start tracking a body in the broad-phase.</p>"],["SweepAndPrune.prototype.add","SweepAndPrune","physics/collision/SweepAndPrune.html#add","(body)","<p>Stop tracking a body in the broad-phase.</p>"],["SweepAndPrune.update","SweepAndPrune","physics/collision/SweepAndPrune.html#update","(update)","<p>Update the endpoints of the tracked AABB's and resort the endpoint lists accordingly. Uses an insertion sort,\nwhere swaps during the sort are taken to signify a potential change in overlap status for the two\nrelevant AABB's. Returns pairs of overlapping AABB's.</p>"],["SweepAndPrune.prototype.update","SweepAndPrune","physics/collision/SweepAndPrune.html#update","()","<p>Update the endpoints to reflect the current location of the AABB.</p>"],["Drag","Force","physics/forces/Drag.html","(options)","<p>Use drag to oppose momentum of a moving object</p>"],["Drag.QUADRATIC","Drag","physics/forces/Drag.html#QUADRATIC","(v)","<p>Used to scale velocity in the computation of the drag force.</p>"],["Drag.LINEAR","Drag","physics/forces/Drag.html#LINEAR","(v)","<p>Used to scale velocity in the computation of the drag force.</p>"],["Drag.prototype.init","Drag","physics/forces/Drag.html#init","(options)","<p>Initialize the Force. Sets defaults if a property was not already set.</p>"],["Drag.prototype.update","Drag","physics/forces/Drag.html#update","(time, dt)","<p>Apply the force.</p>"],["Force","","physics/forces/Force.html","(targets, options)","<p>Abstract force manager to apply forces to targets.</p>"],["Force.prototype.setOptions","Force","physics/forces/Force.html#setOptions","(options)","<p>Decorates the Force with the options object.</p>"],["Force.prototype.addTarget","Force","physics/forces/Force.html#addTarget","(target)","<p>Add a target or targets to the Force.</p>"],["Force.prototype.addTarget","Force","physics/forces/Force.html#addTarget","(target)","<p>Remove a target or targets from the Force.</p>"],["Force.prototype.init","Force","physics/forces/Force.html#init","(options)","<p>Method invoked upon instantiation and the setting of options.</p>"],["Force.prototype.update","Force","physics/forces/Force.html#update","(time, dt)","<p>Apply forces on each target.</p>"],["Gravity1D","Force","physics/forces/Gravity1D.html","(options)","<p>Force that pulls all objects in a direction with constant acceleration</p>"],["Gravity1D.DOWN","Gravity1D","physics/forces/Gravity1D.html#DOWN","",""],["Gravity1D.prototype.init","Gravity1D","physics/forces/Gravity1D.html#init","(options)","<p>Initialize the Force. Sets defaults if a property was not already set.</p>"],["Gravity1D.prototype.update","Gravity1D","physics/forces/Gravity1D.html#update","(time, dt)","<p>Apply the force.</p>"],["Gravity3D","Force","physics/forces/Gravity3D.html","(options)","<p>An inverse square force dependent on the masses of the source and targets.</p>"],["Gravity3D.prototype.init","Gravity3D","physics/forces/Gravity3D.html#init","(options)","<p>Initialize the Force. Sets defaults if a property was not already set.</p>"],["Gravity3D.prototype.update","Gravity3D","physics/forces/Gravity3D.html#update","(time, dt)","<p>Apply the force.</p>"],["RotationalDrag","Force","physics/forces/RotationalDrag.html","(options)","<p>A behavior that slows angular velocity by applying torque.</p>"],["RotationalDrag.QUADRATIC","RotationalDrag","physics/forces/RotationalDrag.html#QUADRATIC","(omega)","<p>Used to scale angular velocity in the computation of the drag torque.</p>"],["RotationalDrag.LINEAR","RotationalDrag","physics/forces/RotationalDrag.html#LINEAR","(omega)","<p>Used to scale angular velocity in the computation of the drag torque.</p>"],["RotationalDrag.prototype.init","RotationalDrag","physics/forces/RotationalDrag.html#init","(options)","<p>Initialize the Force. Sets defaults if a property was not already set.</p>"],["RotationalDrag.prototype.update","RotationalDrag","physics/forces/RotationalDrag.html#update","(time, dt)","<p>Adds a rotational drag force to a physics body's torque accumulator.</p>"],["RotationalSpring","Force","physics/forces/RotationalSpring.html","(options)","<p>A spring-like behavior that attempts to enforce a specfic orientation by applying torque.</p>"],["RotationalSpring.prototype.init","RotationalSpring","physics/forces/RotationalSpring.html#init","(options)","<p>Initialize the Force. Sets defaults if a property was not already set.</p>"],["RotationalSpring.prototype.update","RotationalSpring","physics/forces/RotationalSpring.html#update","(time, dt)","<p>Adds a torque force to a physics body's torque accumulator.</p>"],["Spring","Force","physics/forces/Spring.html","(options)","<p>A force that accelerates a Particle towards a specific anchor point. Can be anchored to\na Vec3 or another source Particle.</p>"],["Spring.FENE","Spring","physics/forces/Spring.html#FENE","(dist, rMax)","<p>A FENE (Finitely Extensible Nonlinear Elastic) spring force\n     see: http://en.wikipedia.org/wiki/FENE</p>"],["Spring.HOOKE","Spring","physics/forces/Spring.html#HOOKE","(dist)","<p>A Hookean spring force, linear in the displacement\n     see: http://en.wikipedia.org/wiki/Hooke's_law</p>"],["Spring.prototype.init","Spring","physics/forces/Spring.html#init","(options)","<p>Initialize the Force. Sets defaults if a property was not already set.</p>"],["Spring.prototype.update","Spring","physics/forces/Spring.html#update","(time, dt)","<p>Apply the force.</p>"],["Compositor","","renderers/Compositor.html","()","<p>Instantiates a new Compositor, used for routing commands received from the\nWebWorker to the WebGL and DOM renderer.</p>"],["Compositor.CommandsToOutput","Compositor","renderers/Compositor.html#CommandsToOutput","","<p>Exposes a key-value-mapping of commands to the renderer they should be\nrouted to.</p>"],["Compositor.prototype.sendEvent","Compositor","renderers/Compositor.html#sendEvent","(path, ev, payload)","<p>Schedules an event to be sent to the WebWorker the next time the out command\nqueue is being flushed.</p>"],["Compositor.prototype.handleWith","Compositor","renderers/Compositor.html#handleWith","(commands)","<p>Internal helper method used by <code>drawCommands</code>.</p>"],["Compositor.prototype.getOrSetContext","Compositor","renderers/Compositor.html#getOrSetContext","(selector)","<p>Retrieves the top-level VirtualElement attached to the passed in document\nselector.\nIf no such element exists, one will be instantiated, therefore representing\nthe equivalent of a Context in the Main Thread.</p>"],["Compositor.prototype.giveSizeFor","Compositor","renderers/Compositor.html#giveSizeFor","(commands)","<p>Internal helper method used by <code>drawCommands</code>.</p>"],["Compositor.prototype.sendResize","Compositor","renderers/Compositor.html#sendResize","(selector, size)","<p>Internal helper method used for notifying the WebWorker about externally\nresized contexts (e.g. by resizing the browser window).</p>"],["Compositor.prototype.drawCommands","Compositor","renderers/Compositor.html#drawCommands","()","<p>Processes the previously via <code>receiveCommands</code> updated incoming &quot;in&quot;\ncommand queue.\nCalled by ThreadManager.</p>"],["Compositor.receiveCommands","Compositor","renderers/Compositor.html#receiveCommands","(commands)","<p>Used by ThreadManager to update the interal queue of incoming commands.\nReceiving commands does not immediately start the rederning process.</p>"],["Compositor.prototype.clearCommands","Compositor","renderers/Compositor.html#clearCommands","()","<p>Flushes the queue of outgoing &quot;out&quot; commands.\nCalled by ThreadManager.</p>"],["ThreadManager","","renderers/ThreadManager.html","(thread, compositor)","<p>The ThreadManager is being updated by an Engine by consecutively calling its\n<code>update</code> method. It can either manage a real Web-Worker or the global\nFamous core singleton.</p>"],["ThreadManager.prototype.update","ThreadManager","renderers/ThreadManager.html#update","(time)","<p>Update method being invoked by the Engine on every <code>requestAnimationFrame</code>.\nUsed for updating the notion of time within the managed thread by sending\na FRAME command and sending messages to</p>"],["History","","router/History.html","(options, root)","<p>A stateless shim for hash routing. Used by router.\n  Supports hash bang routing and HTML5 pushState.\n  Falls back to hash bang urls when pushState is not supported.\n  Implements subset of W3C spec in respect to\n  http://www.w3.org/TR/2011/WD-html5-20110113/history.html#history-0</p>"],["History.hashBangUrls","History","router/History.html#hashBangUrls","",""],["History.prototype.onStateChange","History","router/History.html#onStateChange","(handler)","<p>Register a function to be invoked on every state change.</p>"],["History.prototype.offStateChange","History","router/History.html#offStateChange","(handler)","<p>Deregister a state change handler that has been previously registered\n  through onStateChange.</p>"],["History.prototype.pushState","History","router/History.html#pushState","()","<p>Shim for window.history.pushState</p>"],["History.prototype.replaceState","History","router/History.html#replaceState","()","<p>Shim for window.history.replaceState</p>"],["History.prototype.getState","History","router/History.html#getState","()","<p>Return current normalized state (routed pathname).\nNot compliant with <a href=\"http://www.w3.org/TR/2011/WD-html5-20110113/history.html\">W3C spec 5.4 Session history and\nnavigation</a></p>"],["Router","","router/Router.html","(routes, options)","<p>A simple router supporting HTML5 pushState and hashbang  routing (&quot;#!/&quot;).</p>"],["Router.prototype.start","Router","router/Router.html#start","()","<p>Starts the router by invoking the route handler bound to the current\n  pathname. Will be called by constructor, unless silent option is\n  in use.</p>"],["Router.prototype.navigate","Router","router/Router.html#navigate","(state, options)","<p>Navigates to the given route. If no route is give, navigate to the current\n  pathname (used during initialization).</p>"],["Router.prototype.addRoute","Router","router/Router.html#addRoute","(route, handler)","<p>Dynamically adds a route to the register.</p>"],["Router.prototype.invoke","Router","router/Router.html#invoke","(state)","<p>Invokes the handler bound to the given state.</p>"],["Easing.prototype.linear","Easing","transitions/Easing.html#linear","()",""],["Easing.prototype.easeIn","Easing","transitions/Easing.html#easeIn","()",""],["Easing.prototype.easeOut","Easing","transitions/Easing.html#easeOut","()",""],["Easing.prototype.easeInOut","Easing","transitions/Easing.html#easeInOut","()",""],["Easing.prototype.easeOutBounce","Easing","transitions/Easing.html#easeOutBounce","()",""],["Easing.prototype.spring","Easing","transitions/Easing.html#spring","()",""],["Easing.prototype.inQuad","Easing","transitions/Easing.html#inQuad","()",""],["Easing.prototype.outQuad","Easing","transitions/Easing.html#outQuad","()",""],["Easing.prototype.inOutQuad","Easing","transitions/Easing.html#inOutQuad","()",""],["Easing.prototype.inCubic","Easing","transitions/Easing.html#inCubic","()",""],["Easing.prototype.outCubic","Easing","transitions/Easing.html#outCubic","()",""],["Easing.prototype.inOutCubic","Easing","transitions/Easing.html#inOutCubic","()",""],["Easing.prototype.inQuart","Easing","transitions/Easing.html#inQuart","()",""],["Easing.prototype.outQuart","Easing","transitions/Easing.html#outQuart","()",""],["Easing.prototype.inOutQuart","Easing","transitions/Easing.html#inOutQuart","()",""],["Easing.prototype.inQuint","Easing","transitions/Easing.html#inQuint","()",""],["Easing.prototype.outQuint","Easing","transitions/Easing.html#outQuint","()",""],["Easing.prototype.inOutQuint","Easing","transitions/Easing.html#inOutQuint","()",""],["Easing.prototype.inSine","Easing","transitions/Easing.html#inSine","()",""],["Easing.prototype.outSine","Easing","transitions/Easing.html#outSine","()",""],["Easing.prototype.inOutSine","Easing","transitions/Easing.html#inOutSine","()",""],["Easing.prototype.inExpo","Easing","transitions/Easing.html#inExpo","()",""],["Easing.prototype.outExpo","Easing","transitions/Easing.html#outExpo","()",""],["Easing.prototype.inOutExpo","Easing","transitions/Easing.html#inOutExpo","()",""],["Easing.prototype.inCirc","Easing","transitions/Easing.html#inCirc","()",""],["Easing.prototype.outCirc","Easing","transitions/Easing.html#outCirc","()",""],["Easing.prototype.inOutCirc","Easing","transitions/Easing.html#inOutCirc","()",""],["Easing.prototype.inElastic","Easing","transitions/Easing.html#inElastic","()",""],["Easing.prototype.outElastic","Easing","transitions/Easing.html#outElastic","()",""],["Easing.prototype.inOutElastic","Easing","transitions/Easing.html#inOutElastic","()",""],["Easing.prototype.inBack","Easing","transitions/Easing.html#inBack","()",""],["Easing.prototype.outBack","Easing","transitions/Easing.html#outBack","()",""],["Easing.prototype.inOutBack","Easing","transitions/Easing.html#inOutBack","()",""],["Easing.prototype.inBounce","Easing","transitions/Easing.html#inBounce","()",""],["Easing.prototype.outBounce","Easing","transitions/Easing.html#outBounce","()",""],["Easing.prototype.inOutBounce","Easing","transitions/Easing.html#inOutBounce","()",""],["Easing.prototype.registerCurve","Easing","transitions/Easing.html#registerCurve","(name, curve)","<p>Registers a given curve to be available in subsequent transitions by\n   adding it to the interal dictionary of registered curves.</p>"],["Easing.prototype.unregisterCurve","Easing","transitions/Easing.html#unregisterCurve","(name)","<p>Unregisters the curve registered under the given name by removing it from\n   the internal dictionary of registered curves. This won't effect\n   currently active transitions.</p>"],["Easing.prototype.getCurve","Easing","transitions/Easing.html#getCurve","(name)","<p>Returns the easing curve with the given name.</p>"],["Easing.prototype.getCurves","Easing","transitions/Easing.html#getCurves","()","<p>Retrieves the names of all previously registered easing curves.</p>"],["MultipleTransition","","transitions/MultipleTransition.html","(Transionable)","<p>Transition meta-method to support transitioning multiple\n  values with scalar-only methods.</p>"],["MultipleTransition.prototype.get","MultipleTransition","transitions/MultipleTransition.html#get","(Evaluate)","<p>Get the state of each transition.</p>"],["MultipleTransition.prototype.set","MultipleTransition","transitions/MultipleTransition.html#set","(endState, transition, callback)","<p>Set the end states with a shared transition, with optional callback.</p>"],["MultipleTransition.prototype.pause","MultipleTransition","transitions/MultipleTransition.html#pause","()","<p>Pause all transitions.</p>"],["MultipleTransition.prototype.resume","MultipleTransition","transitions/MultipleTransition.html#resume","()","<p>Resume all transitions.</p>"],["MultipleTransition.prototype.isPaused","MultipleTransition","transitions/MultipleTransition.html#isPaused","()","<p>Check if all muliplexed Transitionable instances have been paused.</p>"],["MultipleTransition.prototype.reset","MultipleTransition","transitions/MultipleTransition.html#reset","(startState)","<p>Reset all transitions to start state.</p>"],["Transitionable","","transitions/Transitionable.html","(start)","<p>A state maintainer for a smooth transition between\n   numerically-specified states. Example numeric states include floats or\n   Transform objects.</p>\n<p>An initial state is set with the constructor or set(startState). A\n   corresponding end state and transition are set with set(endState,\n   transition). Subsequent calls to set(endState, transition) begin at\n   the last state. Calls to get(timestamp) provide the interpolated state\n   along the way.</p>\n<p>Note that there is no event loop here - calls to get() are the only way\n   to find state projected to the current (or provided) time and are\n   the only way to trigger callbacks. Usually this kind of object would\n   be part of the render() path of a visible component.</p>"],["Transitionable.prototype.set","Transitionable","transitions/Transitionable.html#set","(endState, transition, callback)","<p>Add transition to end state to the queue of pending transitions. Special\n   Use: calling without a transition resets the object to that state with\n   no pending actions</p>"],["Transitionable.prototype.reset","Transitionable","transitions/Transitionable.html#reset","(startState)","<p>Cancel all transitions and reset to a stable state</p>"],["Transitionable.prototype.delay","Transitionable","transitions/Transitionable.html#delay","(duration, callback)","<p>Add delay action to the pending action queue queue.</p>"],["Transitionable.prototype.get","Transitionable","transitions/Transitionable.html#get","(timestamp)","<p>Get interpolated state of current action at provided time. If the last\n   action has completed, invoke its callback.</p>"],["Transitionable.prototype.isActive","Transitionable","transitions/Transitionable.html#isActive","()","<p>Is there at least one action pending completion?</p>"],["Transitionable.prototype.halt","Transitionable","transitions/Transitionable.html#halt","()","<p>Halt transition at current state and erase all pending actions.</p>"],["Transitionable.prototype.pause","Transitionable","transitions/Transitionable.html#pause","()","<p>Pause transition. This will not erase any actions.</p>"],["Transitionable.prototype.isPaused","Transitionable","transitions/Transitionable.html#isPaused","()","<p>Has the current action been paused?</p>"],["Transitionable.prototype.resume","Transitionable","transitions/Transitionable.html#resume","()","<p>Resume transition.</p>"],["TweenTransition","","transitions/TweenTransition.html","(options)","<p>A state maintainer for a smooth transition between\n   numerically-specified states.  Example numeric states include floats or\n   Transfornm objects.</p>\n<p>   An initial state is set with the constructor or set(startValue). A\n   corresponding end state and transition are set with set(endValue,\n   transition). Subsequent calls to set(endValue, transition) begin at\n   the last state. Calls to get(timestamp) provide the _interpolated state\n   along the way.</p>\n<p>  Note that there is no event loop here - calls to get() are the only way\n   to find out state projected to the current (or provided) time and are\n   the only way to trigger callbacks. Usually this kind of object would\n   be part of the render() path of a visible component.</p>"],["TweenTransition.prototype.setOptions","TweenTransition","transitions/TweenTransition.html#setOptions","(options)","<p>Set internal options, overriding any default options.</p>"],["TweenTransition.prototype.set","TweenTransition","transitions/TweenTransition.html#set","(endValue, transition, callback)","<p>Add transition to end state to the queue of pending transitions. Special\n   Use: calling without a transition resets the object to that state with\n   no pending actions</p>"],["TweenTransition.prototype.reset","TweenTransition","transitions/TweenTransition.html#reset","(startValue, startVelocity)","<p>Cancel all transitions and reset to a stable state</p>"],["TweenTransition.prototype.getVelocity","TweenTransition","transitions/TweenTransition.html#getVelocity","()","<p>Get current velocity</p>"],["TweenTransition.prototype.get","TweenTransition","transitions/TweenTransition.html#get","(timestamp)","<p>Get interpolated state of current action at provided time. If the last\n   action has completed, invoke its callback.</p>"],["TweenTransition.prototype.update","TweenTransition","transitions/TweenTransition.html#update","(timestamp)","<p>Update internal state to the provided timestamp. This may invoke the last\n   callback and begin a new action.</p>"],["TweenTransition.prototype.isActive","TweenTransition","transitions/TweenTransition.html#isActive","()","<p>Is there at least one action pending completion?</p>"],["TweenTransition.prototype.halt","TweenTransition","transitions/TweenTransition.html#halt","()","<p>Halt transition at current state and erase all pending actions.</p>"],["TweenTransition.prototype.pause","TweenTransition","transitions/TweenTransition.html#pause","()","<p>Pause transition.</p>"],["TweenTransition.prototype.isPaused","TweenTransition","transitions/TweenTransition.html#isPaused","()","<p>Check if transition has been paused.</p>"],["TweenTransition.prototype.resume","TweenTransition","transitions/TweenTransition.html#resume","()","<p>Resume transition.</p>"],["after","","transitions/after.html","(count, callback)","<p>Return wrapper around callback function. Once the wrapper is called N\n  times, invoke the callback function. Arguments and scope preserved.</p>"],["CallbackStore","","utilities/CallbackStore.html","()","<p>A lightweight, featureless EventEmitter.</p>"],["CallbackStore.prototype.on","CallbackStore","utilities/CallbackStore.html#on","(key, callback)","<p>Adds a listener for the specified event (= key).</p>"],["CallbackStore.prototype.off","CallbackStore","utilities/CallbackStore.html#off","(key, callback)","<p>Removes a previously added event listener.</p>"],["CallbackStore.prototype.trigger","CallbackStore","utilities/CallbackStore.html#trigger","(key, payload)","<p>Invokes all the previously for this key registered callbacks.</p>"],["Color","","utilities/Color.html","(Optional)",""],["Color.prototype.toString","Color","utilities/Color.html#toString","()","<p>Returns the definition of the Class: 'Color'</p>"],["Color.prototype.set","Color","utilities/Color.html#set","(r, g, b, options)","<p>Sets the color. It accepts an optional options parameter for tweening colors. Its default parameters are\nin RGB, however, you can also specify different inputs.\nset(r, g, b, option)\nset('rgb', 0, 0, 0, option)\nset('hsl', 0, 0, 0, option)\nset('hsv', 0, 0, 0, option)\nset('hex', '#000000', option)\nset('#000000', option)\nset('black', option)\nset(Color)</p>"],["Color.prototype.isActive","Color","utilities/Color.html#isActive","()","<p>Returns whether Color is still in an animating (tweening) state.</p>"],["Color.prototype.changeTo","Color","utilities/Color.html#changeTo","(Color)","<p>Tweens to another color values which can be set with\nvarious inputs: RGB, HSL, Hex, HSV or another Color instance.</p>"],["Color.prototype.copy","Color","utilities/Color.html#copy","(Color, Optional, Optional)","<p>Copies the color values from another Color instance</p>"],["Color.prototype.clone","Color","utilities/Color.html#clone","()","<p>Clone another Color instance</p>"],["Color.prototype.setColor","Color","utilities/Color.html#setColor","(Color, Optional, Optional)","<p>Sets the color based on static color names</p>"],["Color.prototype.getColor","Color","utilities/Color.html#getColor","(Optional)","<p>Returns the color in either RGB or with the requested format.</p>"],["Color.prototype.determineType","Color","utilities/Color.html#determineType","(Color)","<p>Parses the given input to the appropriate color configuration</p>"],["Color.prototype.setR","Color","utilities/Color.html#setR","(R, Optional, Optional)","<p>Sets the R of the Color's RGB</p>"],["Color.prototype.setG","Color","utilities/Color.html#setG","(G, Optional, Optional)","<p>Sets the G of the Color's RGB</p>"],["Color.prototype.setB","Color","utilities/Color.html#setB","(B, Optional, Optional)","<p>Sets the B of the Color's RGB</p>"],["Color.prototype.setRGB","Color","utilities/Color.html#setRGB","(RGB, Optional, Optional)","<p>Sets RGB</p>"],["Color.prototype.getR","Color","utilities/Color.html#getR","()","<p>Returns R of RGB</p>"],["Color.prototype.getG","Color","utilities/Color.html#getG","()","<p>Returns G of RGB</p>"],["Color.prototype.getB","Color","utilities/Color.html#getB","()","<p>Returns B of RGB</p>"],["Color.prototype.getRGB","Color","utilities/Color.html#getRGB","()","<p>Returns RGB</p>"],["Color.prototype.getNormalizedRGB","Color","utilities/Color.html#getNormalizedRGB","()","<p>Returns Normalized RGB</p>"],["Color.prototype.getRGBString","Color","utilities/Color.html#getRGBString","()","<p>Returns the stringified RGB value</p>"],["Color.prototype.addRGB","Color","utilities/Color.html#addRGB","(RGB, Optional, Optional)","<p>Adds the given RGB values to the current RGB.</p>"],["Color.prototype.addScalar","Color","utilities/Color.html#addScalar","(Scalar, Optional, Optional)","<p>Adds a scalar values with the current RGB.</p>"],["Color.prototype.multiplyRGB","Color","utilities/Color.html#multiplyRGB","(RGB, Optional, Optional)","<p>Multiplies RGB values with the current RGB.</p>"],["Color.prototype.multiplyScalar","Color","utilities/Color.html#multiplyScalar","(Scalar, Optional, Optional)","<p>Multiplies a scalar values with the current RGB.</p>"],["Color.prototype.equals","Color","utilities/Color.html#equals","(Color)","<p>Determines whether another Color instance equals the current one.</p>"],["Color.prototype.copyGammaToLinear","Color","utilities/Color.html#copyGammaToLinear","(Color, Optional, Optional)","<p>Copies the gamma values with the current RGB values</p>"],["Color.prototype.convertGammaToLinear","Color","utilities/Color.html#convertGammaToLinear","(Optional, Optional)","<p>Converts the gamma values of the current RGB values</p>"],["Color.prototype.addColors","Color","utilities/Color.html#addColors","(Color, Color)","<p>Adds two different Color instances together and returns the RGB value</p>"],["Color.prototype.toHex","Color","utilities/Color.html#toHex","(Number)","<p>Converts a number to a hex value</p>"],["Color.prototype.getHex","Color","utilities/Color.html#getHex","()","<p>Returns the current color in Hex</p>"],["Color.prototype.setHex","Color","utilities/Color.html#setHex","(Hex, Optional, Optional)","<p>Sets color using Hex</p>"],["Color.prototype.hueToRGB","Color","utilities/Color.html#hueToRGB","()","<p>Converts Hue to RGB</p>"],["Color.prototype.setHSL","Color","utilities/Color.html#setHSL","(HSL, Optional, Optional)","<p>Sets color using HSL</p>"],["Color.prototype.getHSL","Color","utilities/Color.html#getHSL","()","<p>Returns color in HSL</p>"],["Color.prototype.getHue","Color","utilities/Color.html#getHue","()","<p>Returns hue</p>"],["Color.prototype.setHue","Color","utilities/Color.html#setHue","(Hue, Optional, Optional)","<p>Sets hue</p>"],["Color.prototype.getSaturation","Color","utilities/Color.html#getSaturation","()","<p>Returns saturation</p>"],["Color.prototype.setSaturation","Color","utilities/Color.html#setSaturation","(Saturation, Optional, Optional)","<p>Sets saturation</p>"],["Color.prototype.getBrightness","Color","utilities/Color.html#getBrightness","()","<p>Returns brightness</p>"],["Color.prototype.getLightness","Color","utilities/Color.html#getLightness","()","<p>Returns Lightness</p>"],["Color.prototype.setLightness","Color","utilities/Color.html#setLightness","(Lightness, Optional, Optional)","<p>Sets lightness</p>"],["Color.prototype.setHSV","Color","utilities/Color.html#setHSV","(HSV, Optional, Optional)","<p>Sets color using HSV</p>"],["Color.prototype.getHSV","Color","utilities/Color.html#getHSV","()","<p>Returns color in HSV</p>"],["Color.prototype.flattenArguments","Color","utilities/Color.html#flattenArguments","()","<p>Flatten arguments</p>"],["Color.prototype.argsToArray","Color","utilities/Color.html#argsToArray","()","<p>Converts arguments into an array</p>"],["Color.prototype.isString","Color","utilities/Color.html#isString","(Primitive)","<p>Returns a boolean checking whether input is a 'String'</p>"],["Color.prototype.isInt","Color","utilities/Color.html#isInt","(Primitive)","<p>Returns a boolean checking whether input is an 'Integer'</p>"],["Color.prototype.isFloat","Color","utilities/Color.html#isFloat","(Primitive)","<p>Returns a boolean checking whether input is a 'Float'</p>"],["Color.prototype.allFloats","Color","utilities/Color.html#allFloats","(list)","<p>Returns a boolean checking whether all inputs are of type 'Float'</p>"],["Color.prototype.allInts","Color","utilities/Color.html#allInts","(list)","<p>Returns a boolean checking whether all inputs are of type 'Integer'</p>"],["Color.prototype.allStrings","Color","utilities/Color.html#allStrings","(list)","<p>Returns a boolean checking whether all inputs are of type 'String'</p>"],["Color.prototype.isPercentage","Color","utilities/Color.html#isPercentage","(String)","<p>Returns a boolean checking whether string input has a percentage symbol</p>"],["Color.prototype.getRandomRGB","Color","utilities/Color.html#getRandomRGB","()","<p>Returns a random set of RGB values</p>"],["Color.prototype.getRandomColor","Color","utilities/Color.html#getRandomColor","()","<p>Returns a random color</p>"],["Color.prototype.isHex","Color","utilities/Color.html#isHex","(String)","<p>Returns a boolean checking whether string input has a hash (#) symbol</p>"],["Color.prototype.isType","Color","utilities/Color.html#isType","(String, String)","<p>Returns a boolean checking whether the value and type are same</p>"],["Color.prototype.clamp","Color","utilities/Color.html#clamp","(Number, Minumum, Maximum)","<p>Clamps a value between a minimum and a maximum</p>"],["Color.prototype.isColorInstance","Color","utilities/Color.html#isColorInstance","(Color)","<p>Returns boolean whether the input is a Color instance</p>"],["KeyCodes","","utilities/KeyCodes.html","()","<p>Collection to map keyboard codes in plain english</p>"],["ObjectManager","","utilities/ObjectManager.html","()","<p>Singleton object to manage recycling of objects with typically short lifespans, used to cut down on the\namount of garbage collection required.</p>"],["ObjectManager.prototype.register","ObjectManager","utilities/ObjectManager.html#register","(type, Constructor)","<p>Register request and free functions for the given type.</p>"],["ObjectManager.prototype.disposeOf","ObjectManager","utilities/ObjectManager.html#disposeOf","(undefined)","<p>Untrack all object of the given type. Used to allow allocated objects to be garbage collected.</p>"],["clone","","utilities/clone.html","(b)","<p>Deep clone an object.</p>"],["flatClone","","utilities/flatClone.html","(obj)","<p>Flat clone an object.</p>"],["loadURL","","utilities/loadURL.html","(url, callback)","<p>Load a URL and return its contents in a callback</p>"],["strip","","utilities/strip.html","(primitive)","<p>Removes all values not being of a primitive type from an arbitrary object\nliteral.</p>"],["DynamicGeometry","","webgl-geometries/DynamicGeometry.html","(options)","<p>DynamicGeometry is a component that defines the data that should\n  be drawn to the webGL canvas. Manages vertex data and attributes.</p>"],["DynamicGeometry.prototype.getVertexBuffer","DynamicGeometry","webgl-geometries/DynamicGeometry.html#getVertexBuffer","(bufferName)","<p>Gets the buffer object based on buffer name. Throws error\nif bufferName is not provided.</p>"],["DynamicGeometry.prototype.setVertexBuffer","DynamicGeometry","webgl-geometries/DynamicGeometry.html#setVertexBuffer","(bufferName, value, size)","<p>Sets a vertex buffer with given name to input value. Registers a new \nbuffer if one does not exist with given name.</p>"],["DynamicGeometry.prototype.fromGeometry","DynamicGeometry","webgl-geometries/DynamicGeometry.html#fromGeometry","(geometry)","<p>Copies and sets all buffers from another geometry instance.</p>"],["DynamicGeometry.prototype.setVertexPositions","DynamicGeometry","webgl-geometries/DynamicGeometry.html#setVertexPositions","(value)","<p>Set the positions of the vertices in this geometry.</p>"],["DynamicGeometry.prototype.setNormals","DynamicGeometry","webgl-geometries/DynamicGeometry.html#setNormals","(value)","<p>Set the normals on this geometry.</p>"],["DynamicGeometry.prototype.setTextureCoords","DynamicGeometry","webgl-geometries/DynamicGeometry.html#setTextureCoords","(value)","<p>Set the texture coordinates on this geometry.</p>"],["DynamicGeometry.prototype.setTextureCoords","DynamicGeometry","webgl-geometries/DynamicGeometry.html#setTextureCoords","(value)","<p>Set the texture coordinates on this geometry.</p>"],["DynamicGeometry.prototype.setDrawType","DynamicGeometry","webgl-geometries/DynamicGeometry.html#setDrawType","(type)","<p>Set the WebGL drawing primitive for this geometry.</p>"],["DynamicGeometry.prototype.getVertexPositions","DynamicGeometry","webgl-geometries/DynamicGeometry.html#getVertexPositions","()","<p>Returns the 'pos' vertex buffer of the geometry.</p>"],["DynamicGeometry.prototype.getNormals","DynamicGeometry","webgl-geometries/DynamicGeometry.html#getNormals","()","<p>Returns the 'normal' vertex buffer of the geometry.</p>"],["DynamicGeometry.prototype.getTextureCoords","DynamicGeometry","webgl-geometries/DynamicGeometry.html#getTextureCoords","()","<p>Returns the 'textureCoord' vertex buffer of the geometry.</p>"],["Geometry","","webgl-geometries/Geometry.html","(options)","<p>Geometry is a component that defines the data that should\nbe drawn to the webGL canvas. Manages vertex data and attributes.</p>"],["GeometryHelper","","webgl-geometries/GeometryHelper.html","()","<p>A helper object used to calculate buffers for complicated geometries.\nTailored for the WebGLRenderer, used by most primitives.</p>"],["GeometryHelper.prototype.generateParametric","GeometryHelper","webgl-geometries/GeometryHelper.html#generateParametric","(detailX, detailY, func)","<p>A function that iterates through vertical and horizontal slices\nbased on input detail, and generates vertices and indices for each\nsubdivision.</p>"],["GeometryHelper.prototype.computeNormals","GeometryHelper","webgl-geometries/GeometryHelper.html#computeNormals","(vertices, indices, out)","<p>Calculates normals belonging to each face of a geometry.<br>Assumes clockwise declaration of vertices.</p>"],["GeometryHelper.prototype.subdivide","GeometryHelper","webgl-geometries/GeometryHelper.html#subdivide","(indices, vertices, texutureCoords)","<p>Divides all inserted triangles into four sub-triangles. Alters the\npassed in arrays.</p>"],["GeometryHelper.prototype.getUniqueFaces","GeometryHelper","webgl-geometries/GeometryHelper.html#getUniqueFaces","(vertices, indices)","<p>Creates duplicate of vertices that are shared between faces.\nAlters the input vertex and index arrays.</p>"],["GeometryHelper.prototype.subdivide","GeometryHelper","webgl-geometries/GeometryHelper.html#subdivide","(vertices, indices)","<p>Divides all inserted triangles into four sub-triangles while maintaining\na radius of one. Alters the passed in arrays.</p>"],["GeometryHelper.prototype.getSpheroidNormals","GeometryHelper","webgl-geometries/GeometryHelper.html#getSpheroidNormals","(vertices, out)","<p>Divides all inserted triangles into four sub-triangles while maintaining\na radius of one. Alters the passed in arrays.</p>"],["GeometryHelper.prototype.getSpheroidUV","GeometryHelper","webgl-geometries/GeometryHelper.html#getSpheroidUV","(vertices, out)","<p>Calculates texture coordinates for spheroid primitives based on\ninput vertices.</p>"],["GeometryHelper.prototype.normalizeAll","GeometryHelper","webgl-geometries/GeometryHelper.html#normalizeAll","(vertices, out)","<p>Iterates through and normalizes a list of vertices.</p>"],["GeometryHelper.prototype.normalizeVertices","GeometryHelper","webgl-geometries/GeometryHelper.html#normalizeVertices","(vertices, out)","<p>Normalizes a set of vertices to model space.</p>"],["GeometryHelper.prototype.getTranslationFactor","GeometryHelper","webgl-geometries/GeometryHelper.html#getTranslationFactor","(max, min)","<p>Determines translation amount for a given axis to normalize model coordinates.</p>"],["GeometryHelper.prototype.getScaleFactor","GeometryHelper","webgl-geometries/GeometryHelper.html#getScaleFactor","(max, min)","<p>Determines scale amount for a given axis to normalize model coordinates.</p>"],["GeometryHelper.prototype.getAzimuth","GeometryHelper","webgl-geometries/GeometryHelper.html#getAzimuth","(v)","<p>Finds the azimuth, or angle above the XY plane, of a given vector.</p>"],["GeometryHelper.prototype.getAltitude","GeometryHelper","webgl-geometries/GeometryHelper.html#getAltitude","(v)","<p>Finds the altitude, or angle above the XZ plane, of a given vector.</p>"],["GeometryHelper.prototype.trianglesToLines","GeometryHelper","webgl-geometries/GeometryHelper.html#trianglesToLines","(indices)","<p>Converts a list of indices from 'triangle' to 'line' format.</p>"],["Circle","","webgl-geometries/primitives/Circle.html","(options)","<p>This function returns a new static geometry, which is passed\ncustom buffer data.</p>"],["Circle.prototype.getBuffers","Circle","webgl-geometries/primitives/Circle.html#getBuffers","(detail)","<p>Calculates and returns all vertex positions, texture\ncoordinates and normals of the circle primitive.</p>"],["Cylinder","","webgl-geometries/primitives/Cylinder.html","(options)","<p>This class creates a new geometry instance and sets\nits vertex positions, texture coordinates, normals,\nand indices to based on the primitive.</p>"],["Cylinder.prototype.generator","Cylinder","webgl-geometries/primitives/Cylinder.html#generator","(r, u, v)","<p>Function used in iterative construction of parametric primitive.</p>"],["GeodesicSphere","","webgl-geometries/primitives/GeodesicSphere.html","(options)","<p>This function returns a new static geometry, which is passed\ncustom buffer data.</p>"],["Icosahedron","","webgl-geometries/primitives/Icosahedron.html","(options)","<p>This function returns a new static geometry, which is passed\ncustom buffer data.</p>"],["ParametricCone","","webgl-geometries/primitives/ParametricCone.html","(options)","<p>This function returns a new static geometry, which is passed\ncustom buffer data.</p>"],["ParametricCone.prototype.generator","ParametricCone","webgl-geometries/primitives/ParametricCone.html#generator","(r, u, v)","<p>function used in iterative construction of parametric primitive.</p>"],["Plane","","webgl-geometries/primitives/Plane.html","(options)","<p>This function returns a new static geometry, which is passed\ncustom buffer data.</p>"],["Sphere.prototype.generator","Sphere","webgl-geometries/primitives/Sphere.html#generator","(u, v)","<p>Function used in iterative construction of parametric primitive.</p>"],["Tetrahedron","","webgl-geometries/primitives/Tetrahedron.html","(options)","<p>This function generates custom buffers and passes them to\na new static geometry, which is returned to the user.</p>"],["Torus","","webgl-geometries/primitives/Torus.html","(options)","<p>This function returns a new static geometry, which is passed\ncustom buffer data.</p>"],["Torus.prototype.generator","Torus","webgl-geometries/primitives/Torus.html#generator","(c, a, u, v)","<p>function used in iterative construction of parametric primitive.</p>"],["Triangle","","webgl-geometries/primitives/Triangle.html","(options)","<p>This function returns a new static geometry, which is passed\ncustom buffer data.</p>"],["Material","","webgl-materials/Material.html","(definiton, list, map)","<p>Material is a public class that composes a material-graph out of expressions</p>"],["Material.prototype.traverse","Material","webgl-materials/Material.html#traverse","(invoked)","<p>Iterates over material graph</p>"],["Material.prototype._compile","Material","webgl-materials/Material.html#_compile","()","<p>Converts material graph into chunk</p>"],["Mesh","","webgl-renderables/Mesh.html","(dispatch, Options)","<p>The Mesh class is responsible for providing the API for how\na RenderNode will interact with the WebGL API by adding\na set of commands to the renderer.</p>"],["Mesh.prototype.toString","Mesh","webgl-renderables/Mesh.html#toString","()","<p>Returns the definition of the Class: 'Mesh'</p>"],["Mesh._receiveTransformChange","Mesh","webgl-renderables/Mesh.html#_receiveTransformChange","()","<p>Receives transform change updates from the scene graph.</p>"],["Mesh._receiveSizeChange","Mesh","webgl-renderables/Mesh.html#_receiveSizeChange","()","<p>Receives size change updates from the scene graph.</p>"],["Mesh._receiveOpacityChange","Mesh","webgl-renderables/Mesh.html#_receiveOpacityChange","()","<p>Receives opacity change updates from the scene graph.</p>"],["Mesh.prototype.getSize","Mesh","webgl-renderables/Mesh.html#getSize","()","<p>Returns the size of Mesh.</p>"],["Mesh.prototype.setGeometry","Mesh","webgl-renderables/Mesh.html#setGeometry","(geometry, Options)","<p>Set the geometry of a mesh.</p>"],["Mesh.prototype.getGeometry","Mesh","webgl-renderables/Mesh.html#getGeometry","()","<p>Get the geometry of a mesh.</p>"],["Mesh.prototype.clean","Mesh","webgl-renderables/Mesh.html#clean","()","<p>Returns boolean: if true, renderable is to be updated on next engine tick</p>"],["Mesh.prototype.setBaseColor","Mesh","webgl-renderables/Mesh.html#setBaseColor","(r, g, b, options)","<p>Changes the color of Mesh, passing either a material expression or a basic\ncolor using 'Color' as its helper. If no material expression is passed in,\nthen the Color accepts various inputs and an optional options parameter for\ntweening colors. Its default parameters are in RGB, however, you can also\nspecify different inputs.\nsetBaseColor(r, g, b, option)\nsetBaseColor('rgb', 0, 0, 0, option)\nsetBaseColor('hsl', 0, 0, 0, option)\nsetBaseColor('hsv', 0, 0, 0, option)\nsetBaseColor('hex', '#000000', option)\nsetBaseColor('#000000', option)\nsetBaseColor('black', option)\nsetBaseColor(Color)</p>"],["Mesh.prototype.getBaseColor","Mesh","webgl-renderables/Mesh.html#getBaseColor","()","<p>Returns either the material expression or the color of Mesh.</p>"],["Mesh.prototype.setFlatShading","Mesh","webgl-renderables/Mesh.html#setFlatShading","(Boolean)","<p>Change whether the Mesh is affected by light. Default is true.</p>"],["Mesh.prototype.getFlatShading","Mesh","webgl-renderables/Mesh.html#getFlatShading","()","<p>Returns a boolean for whether Mesh is affected by light.</p>"],["Mesh.prototype.normal","Mesh","webgl-renderables/Mesh.html#normal","()","<p>Defines a 3-element map which is used to provide significant physical\ndetail to the surface by perturbing the facing direction of each individual\npixel.</p>"],["Mesh.prototype.getNormals","Mesh","webgl-renderables/Mesh.html#getNormals","()","<p>Returns the Normals expression of Mesh (work in progress)</p>"],["Mesh.prototype.setGlossiness","Mesh","webgl-renderables/Mesh.html#setGlossiness","(undefined, Options)","<p>Defines the glossiness of the mesh from either a material expression or a\nscalar value</p>"],["Mesh.prototype.getGlossiness","Mesh","webgl-renderables/Mesh.html#getGlossiness","()","<p>Returns material expression or scalar value for glossiness.</p>"],["Mesh.prototype.metallic","Mesh","webgl-renderables/Mesh.html#metallic","(Material)","<p>Defines 1 element map which describes the electrical conductivity of a\nmaterial.</p>"],["Mesh.prototype.getMetallness","Mesh","webgl-renderables/Mesh.html#getMetallness","()","<p>Returns material expression for metallness.</p>"],["Mesh.prototype.setPositionOffset","Mesh","webgl-renderables/Mesh.html#setPositionOffset","(Material)","<p>Defines 3 element map which displaces the position of each vertex in world\nspace.</p>"],["Mesh.prototype.getPositionOffset","Mesh","webgl-renderables/Mesh.html#getPositionOffset","()","<p>Returns position offset.</p>"],["Mesh.prototype.setOptions","Mesh","webgl-renderables/Mesh.html#setOptions","(Options)","<p>Defines 3 element map which displaces the position of each vertex in world\nspace.</p>"],["AmbientLight","","webgl-renderables/lights/AmbientLight.html","(dispatch)","<p>AmbientLight extends the functionality of Light. It sets the ambience in\nthe scene. Ambience is a light source that emits light in the entire\nscene, evenly.</p>"],["AmbientLight.prototype.toString","AmbientLight","webgl-renderables/lights/AmbientLight.html#toString","()","<p>Returns the definition of the Class: 'AmbientLight'</p>"],["AmbientLight.constructor","AmbientLight","webgl-renderables/lights/AmbientLight.html#constructor","","<p>Sets AmbientLight as the constructor</p>"],["Light","","webgl-renderables/lights/Light.html","(dispatch)","<p>The blueprint for all light components for inheriting common functionality.</p>"],["Light.prototype.toString","Light","webgl-renderables/lights/Light.html#toString","()","<p>Returns the definition of the Class: 'Light'</p>"],["Light.prototype.setColor","Light","webgl-renderables/lights/Light.html#setColor","(r, g, b, options)","<p>Changes the color of the light, using 'Color' as its helper. It accepts an\noptional options parameter for tweening colors. Its default parameters are\nin RGB, however, you can also specify different inputs.\nsetColor(r, g, b, option)\nsetColor('rgb', 0, 0, 0, option)\nsetColor('hsl', 0, 0, 0, option)\nsetColor('hsv', 0, 0, 0, option)\nsetColor('hex', '#000000', option)\nsetColor('#000000', option)\nsetColor('black', option)\nsetColor(Color)</p>"],["Light.prototype.getColor","Light","webgl-renderables/lights/Light.html#getColor","(option)","<p>Returns the current color value. Defaults to RGB values if no option is\nprovided.</p>"],["Light.prototype.clean","Light","webgl-renderables/lights/Light.html#clean","()","<p>Returns boolean: if true, component is to be updated on next engine tick</p>"],["PointLight","","webgl-renderables/lights/PointLight.html","(dispatch)","<p>PointLight extends the functionality of Light. PointLight is a light source\nthat emits light in all directions from a point in space.</p>"],["PointLight.prototype.toString","PointLight","webgl-renderables/lights/PointLight.html#toString","()","<p>Returns the definition of the Class: 'PointLight'</p>"],["PointLight.constructor","PointLight","webgl-renderables/lights/PointLight.html#constructor","","<p>Sets PointLight as the constructor</p>"],["PointLight._receiveTransformChange","PointLight","webgl-renderables/lights/PointLight.html#_receiveTransformChange","()","<p>Receives transform change updates from the scene graph.</p>"],["Buffer","","webgl-renderers/Buffer.html","(target, type, gl)","<p>Buffer is a private class that wraps the vertex data that defines\nthe the points of the triangles that webgl draws. Each buffer \nmaps to one attribute of a mesh.</p>"],["Buffer.prototype.subData","Buffer","webgl-renderers/Buffer.html#subData","()","<p>Creates a WebGL buffer if one does not yet exist and binds the buffer to\nto the context.  Runs bufferData with appropriate data.</p>"],["BufferRegistry","","webgl-renderers/BufferRegistry.html","(context)","<p>BufferRegistry is a class that manages allocation of buffers to\ninput geometries.</p>"],["BufferRegistry.prototype.allocate","BufferRegistry","webgl-renderers/BufferRegistry.html#allocate","(geometryId, name, value, spacing, dynamic)","<p>Binds and fills all the vertex data into webgl buffers.  Will reuse buffers if\npossible.  Populates registry with the name of the buffer, the WebGL buffer\nobject, spacing of the attribute, the attribute's offset within the buffer, \nand finally the length of the buffer.  This information is later accessed by\nthe root to draw the buffers.</p>"],["Program","","webgl-renderers/Program.html","(gl)","<p>A class that handles interactions with the WebGL shader program\nused by a specific context.  It manages creation of the shader program\nand the attached vertex and fragment shaders.  It is also in charge of\npassing all uniforms to the WebGLContext.</p>"],["Program.prototype.registerMaterial","Program","webgl-renderers/Program.html#registerMaterial","(name, material)","<p>Determines whether a material has already been registered to\nthe shader program.</p>"],["Program.prototype.resetProgram","Program","webgl-renderers/Program.html#resetProgram","()","<p>Clears all cached uniforms and attribute locations.  Assembles\nnew fragment and vertex shaders and based on material from\ncurrently registered materials.  Attaches said shaders to new\nshader program and upon success links program to the WebGL\ncontext.</p>"],["Program.prototype.uniformIsCached","Program","webgl-renderers/Program.html#uniformIsCached","(targetName, value)","<p>Compares the value of the input uniform value against\nthe cached value stored on the Program class.  Updates and\ncreates new entries in the cache when necessary.</p>"],["Program.prototype.setUniforms","Program","webgl-renderers/Program.html#setUniforms","(uniformNames, uniformValue)","<p>Handles all passing of uniforms to WebGL drawing context.  This\nfunction will find the uniform location and then, based on\na type inferred from the javascript value of the uniform, it will call\nthe appropriate function to pass the uniform to WebGL.  Finally,\nsetUniforms will iterate through the passed in shaderChunks (if any)\nand set the appropriate uniforms to specify which chunks to use.</p>"],["Program.prototype.compileShader","Program","webgl-renderers/Program.html#compileShader","(shader, source)","<p>Adds shader source to shader and compiles the input shader.  Checks\ncompile status and logs error if necessary.</p>"],["Texture","","webgl-renderers/Texture.html","()","<p>Texture is a private class that stores image data\nto be accessed from a shader or used as a render target.</p>"],["Texture.prototype.bind","Texture","webgl-renderers/Texture.html#bind","(unit)","<p>Binds this texture as the selected target.</p>"],["Texture.prototype.unbind","Texture","webgl-renderers/Texture.html#unbind","(unit)","<p>Erases the texture data in the given texture slot.</p>"],["Texture.prototype.setImage","Texture","webgl-renderers/Texture.html#setImage","(img)","<p>Replaces the image data in the texture with the given image.</p>"],["Texture.prototype.setArray","Texture","webgl-renderers/Texture.html#setArray","(input)","<p>Replaces the image data in the texture with an array of arbitrary data.</p>"],["Texture.prototype.readBack","Texture","webgl-renderers/Texture.html#readBack","()","<p>Dumps the rgb-pixel contents of a texture into an array for debugging purposes</p>"],["WebGLRenderer","","webgl-renderers/WebGLRenderer.html","(canvas)","<p>WebGLRenderer is a private class that manages all interactions with the WebGL\nAPI.  Each frame it receives commands from the compositor and updates its registries\naccordingly.  Subsequently, the draw function is called and the WebGLRenderer\nissues draw calls for all meshes in its registry.</p>"],["WebGLRenderer.numLights","WebGLRenderer","webgl-renderers/WebGLRenderer.html#numLights","","<p>Lights</p>"],["WebGLRenderer.prototype.getWebGLContext","WebGLRenderer","webgl-renderers/WebGLRenderer.html#getWebGLContext","(canvas)","<p>Attempts to retreive the WebGLRenderer context using several\naccessors.  For browser compatability.  Throws on error.</p>"],["WebGLRenderer.prototype.createLight","WebGLRenderer","webgl-renderers/WebGLRenderer.html#createLight","(path)","<p>Adds a new base spec to the light registry at a given path.</p>"],["WebGLRenderer.prototype.createMesh","WebGLRenderer","webgl-renderers/WebGLRenderer.html#createMesh","(path)","<p>Adds a new base spec to the mesh registry at a given path.</p>"],["WebGLRenderer.prototype.receive","WebGLRenderer","webgl-renderers/WebGLRenderer.html#receive","(path, commands)","<p>Receives updates to meshes and other famous renderables, and updates\nregistries accordingly.</p>"],["WebGLRenderer.prototype.draw","WebGLRenderer","webgl-renderers/WebGLRenderer.html#draw","(renderState)","<p>Triggers the 'draw' phase of the WebGLRenderer.  Iterates through registries\nto set uniforms, set attributes and issue draw commands for renderables.</p>"],["WebGLRenderer.prototype.drawBuffers","WebGLRenderer","webgl-renderers/WebGLRenderer.html#drawBuffers","(vertexBuffers, mode, id)","<p>Loads the buffers and issues the draw command for a geometry.</p>"],["WebGLRenderer.prototype.renderOffscreen","WebGLRenderer","webgl-renderers/WebGLRenderer.html#renderOffscreen","(callback, size, texture)","<p>Allocates an array buffer where vertex data is sent to via compile.</p>"],["WebGLRenderer.prototype.checkFrameBufferStatus","WebGLRenderer","webgl-renderers/WebGLRenderer.html#checkFrameBufferStatus","(the)","<p>Diagnoses the failed intialization of an FBO.</p>"],["WebGLRenderer.prototype.updateSize","WebGLRenderer","webgl-renderers/WebGLRenderer.html#updateSize","()","<p>Updates the width and height of parent canvas, sets the viewport size on\nthe WebGL context and updates the resolution uniform for the shader program.\nSize is retreived from the container object of the renderer.</p>"],["WebGLRenderer.prototype.handleOptions","WebGLRenderer","webgl-renderers/WebGLRenderer.html#handleOptions","(options)","<p>Updates the state of the WebGL drawing context based on custom parameters\ndefined on a mesh.</p>"],["WebGLRenderer.prototype.resetOptions","WebGLRenderer","webgl-renderers/WebGLRenderer.html#resetOptions","(options)","<p>Resets the state of the WebGL drawing context to default values.</p>"],["WebGLRenderer.prototype.loadImage","WebGLRenderer","webgl-renderers/WebGLRenderer.html#loadImage","(img, callback)","<p>Loads an image from a string or Image object and executes a callback function.</p>"],["WebGLRenderer.prototype.handleTexture","WebGLRenderer","webgl-renderers/WebGLRenderer.html#handleTexture","(input)","<p>Handles loading of texture objects.</p>"]]}};